//===--- OmpSsKinds.def - OmpSs directives and clauses list ---*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
/// \file
/// This file defines the list of supported OmpSs directives and
/// clauses.
///
//===----------------------------------------------------------------------===//

#ifndef OMPSS_DIRECTIVE
#  define OMPSS_DIRECTIVE(Name)
#endif
#ifndef OMPSS_DIRECTIVE_EXT
#define OMPSS_DIRECTIVE_EXT(Name, Str)
#endif
#ifndef OMPSS_CLAUSE
#  define OMPSS_CLAUSE(Name, Class)
#endif
#ifndef OMPSS_PARALLEL_CLAUSE
#  define OMPSS_PARALLEL_CLAUSE(Name)
#endif
#ifndef OMPSS_SIMD_CLAUSE
#  define OMPSS_SIMD_CLAUSE(Name)
#endif
#ifndef OMPSS_FOR_CLAUSE
#  define OMPSS_FOR_CLAUSE(Name)
#endif
#ifndef OMPSS_FOR_SIMD_CLAUSE
#  define OMPSS_FOR_SIMD_CLAUSE(Name)
#endif
#ifndef OMPSS_SECTIONS_CLAUSE
#  define OMPSS_SECTIONS_CLAUSE(Name)
#endif
#ifndef OMPSS_SINGLE_CLAUSE
#  define OMPSS_SINGLE_CLAUSE(Name)
#endif
#ifndef OMPSS_PARALLEL_FOR_CLAUSE
#  define OMPSS_PARALLEL_FOR_CLAUSE(Name)
#endif
#ifndef OMPSS_PARALLEL_FOR_SIMD_CLAUSE
#  define OMPSS_PARALLEL_FOR_SIMD_CLAUSE(Name)
#endif
#ifndef OMPSS_PARALLEL_SECTIONS_CLAUSE
#  define OMPSS_PARALLEL_SECTIONS_CLAUSE(Name)
#endif
#ifndef OMPSS_TASK_CLAUSE
#  define OMPSS_TASK_CLAUSE(Name)
#endif
#ifndef OMPSS_ATOMIC_CLAUSE
#  define OMPSS_ATOMIC_CLAUSE(Name)
#endif
#ifndef OMPSS_TARGET_CLAUSE
#  define OMPSS_TARGET_CLAUSE(Name)
#endif
#ifndef OMPSS_TARGET_DATA_CLAUSE
#  define OMPSS_TARGET_DATA_CLAUSE(Name)
#endif
#ifndef OMPSS_TARGET_ENTER_DATA_CLAUSE
#define OMPSS_TARGET_ENTER_DATA_CLAUSE(Name)
#endif
#ifndef OMPSS_TARGET_EXIT_DATA_CLAUSE
#define OMPSS_TARGET_EXIT_DATA_CLAUSE(Name)
#endif
#ifndef OMPSS_TARGET_PARALLEL_CLAUSE
#  define OMPSS_TARGET_PARALLEL_CLAUSE(Name)
#endif
#ifndef OMPSS_TARGET_PARALLEL_FOR_CLAUSE
#  define OMPSS_TARGET_PARALLEL_FOR_CLAUSE(Name)
#endif
#ifndef OMPSS_TARGET_UPDATE_CLAUSE
#  define OMPSS_TARGET_UPDATE_CLAUSE(Name)
#endif
#ifndef OMPSS_TEAMS_CLAUSE
#  define OMPSS_TEAMS_CLAUSE(Name)
#endif
#ifndef OMPSS_CANCEL_CLAUSE
#  define OMPSS_CANCEL_CLAUSE(Name)
#endif
#ifndef OMPSS_ORDERED_CLAUSE
#  define OMPSS_ORDERED_CLAUSE(Name)
#endif
#ifndef OMPSS_TASKLOOP_CLAUSE
#  define OMPSS_TASKLOOP_CLAUSE(Name)
#endif
#ifndef OMPSS_TASKLOOP_SIMD_CLAUSE
#  define OMPSS_TASKLOOP_SIMD_CLAUSE(Name)
#endif
#ifndef OMPSS_CRITICAL_CLAUSE
#  define OMPSS_CRITICAL_CLAUSE(Name)
#endif
#ifndef OMPSS_DISTRIBUTE_CLAUSE
#define OMPSS_DISTRIBUTE_CLAUSE(Name)
#endif
#ifndef OMPSS_DEFAULT_KIND
#  define OMPSS_DEFAULT_KIND(Name)
#endif
#ifndef OMPSS_PROC_BIND_KIND
#  define OMPSS_PROC_BIND_KIND(Name)
#endif
#ifndef OMPSS_SCHEDULE_KIND
#define OMPSS_SCHEDULE_KIND(Name)
#endif
#ifndef OMPSS_SCHEDULE_MODIFIER
#define OMPSS_SCHEDULE_MODIFIER(Name)
#endif
#ifndef OMPSS_DEPEND_KIND
#define OMPSS_DEPEND_KIND(Name)
#endif
#ifndef OMPSS_LINEAR_KIND
#define OMPSS_LINEAR_KIND(Name)
#endif
#ifndef OMPSS_MAP_KIND
#define OMPSS_MAP_KIND(Name)
#endif
#ifndef OMPSS_DIST_SCHEDULE_KIND
#define OMPSS_DIST_SCHEDULE_KIND(Name)
#endif
#ifndef OMPSS_DEFAULTMAP_KIND
#define OMPSS_DEFAULTMAP_KIND(Name)
#endif
#ifndef OMPSS_DEFAULTMAP_MODIFIER
#define OMPSS_DEFAULTMAP_MODIFIER(Name)
#endif
#ifndef OMPSS_DISTRIBUTE_PARALLEL_FOR_CLAUSE
#define OMPSS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(Name)
#endif
#ifndef OMPSS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE
#define OMPSS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(Name)
#endif
#ifndef OMPSS_DISTRIBUTE_SIMD_CLAUSE
#define OMPSS_DISTRIBUTE_SIMD_CLAUSE(Name)
#endif
#ifndef OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE
#define OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(Name)
#endif
#ifndef OMPSS_TARGET_SIMD_CLAUSE
#define OMPSS_TARGET_SIMD_CLAUSE(Name)
#endif
#ifndef OMPSS_TEAMS_DISTRIBUTE_CLAUSE
#define OMPSS_TEAMS_DISTRIBUTE_CLAUSE(Name)
#endif
#ifndef OMPSS_TEAMS_DISTRIBUTE_SIMD_CLAUSE
#define OMPSS_TEAMS_DISTRIBUTE_SIMD_CLAUSE(Name)
#endif
#ifndef OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE
#define OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(Name)
#endif
#ifndef OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE
#define OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(Name)
#endif
#ifndef OMPSS_TARGET_TEAMS_CLAUSE
#define OMPSS_TARGET_TEAMS_CLAUSE(Name)
#endif
#ifndef OMPSS_TARGET_TEAMS_DISTRIBUTE_CLAUSE
#define OMPSS_TARGET_TEAMS_DISTRIBUTE_CLAUSE(Name)
#endif
#ifndef OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE
#define OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(Name)
#endif
#ifndef OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE
#define OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(Name)
#endif
#ifndef OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE
#define OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE(Name)
#endif
#ifndef OMPSS_TASKGROUP_CLAUSE
#define OMPSS_TASKGROUP_CLAUSE(Name)
#endif

// OmpSs directives.
OMPSS_DIRECTIVE(threadprivate)
OMPSS_DIRECTIVE(parallel)
OMPSS_DIRECTIVE(task)
OMPSS_DIRECTIVE(simd)
OMPSS_DIRECTIVE(for)
OMPSS_DIRECTIVE(sections)
OMPSS_DIRECTIVE(section)
OMPSS_DIRECTIVE(single)
OMPSS_DIRECTIVE(master)
OMPSS_DIRECTIVE(critical)
OMPSS_DIRECTIVE(taskyield)
OMPSS_DIRECTIVE(barrier)
OMPSS_DIRECTIVE(taskwait)
OMPSS_DIRECTIVE(taskgroup)
OMPSS_DIRECTIVE(flush)
OMPSS_DIRECTIVE(ordered)
OMPSS_DIRECTIVE(atomic)
OMPSS_DIRECTIVE(target)
OMPSS_DIRECTIVE(teams)
OMPSS_DIRECTIVE(cancel)
OMPSS_DIRECTIVE_EXT(target_data, "target data")
OMPSS_DIRECTIVE_EXT(target_enter_data, "target enter data")
OMPSS_DIRECTIVE_EXT(target_exit_data, "target exit data")
OMPSS_DIRECTIVE_EXT(target_parallel, "target parallel")
OMPSS_DIRECTIVE_EXT(target_parallel_for, "target parallel for")
OMPSS_DIRECTIVE_EXT(target_update, "target update")
OMPSS_DIRECTIVE_EXT(parallel_for, "parallel for")
OMPSS_DIRECTIVE_EXT(parallel_for_simd, "parallel for simd")
OMPSS_DIRECTIVE_EXT(parallel_sections, "parallel sections")
OMPSS_DIRECTIVE_EXT(for_simd, "for simd")
OMPSS_DIRECTIVE_EXT(cancellation_point, "cancellation point")
OMPSS_DIRECTIVE_EXT(declare_reduction, "declare reduction")
OMPSS_DIRECTIVE_EXT(declare_simd, "declare simd")
OMPSS_DIRECTIVE(taskloop)
OMPSS_DIRECTIVE_EXT(taskloop_simd, "taskloop simd")
OMPSS_DIRECTIVE(distribute)
OMPSS_DIRECTIVE_EXT(declare_target, "declare target")
OMPSS_DIRECTIVE_EXT(end_declare_target, "end declare target")
OMPSS_DIRECTIVE_EXT(distribute_parallel_for, "distribute parallel for")
OMPSS_DIRECTIVE_EXT(distribute_parallel_for_simd, "distribute parallel for simd")
OMPSS_DIRECTIVE_EXT(distribute_simd, "distribute simd")
OMPSS_DIRECTIVE_EXT(target_parallel_for_simd, "target parallel for simd")
OMPSS_DIRECTIVE_EXT(target_simd, "target simd")
OMPSS_DIRECTIVE_EXT(teams_distribute, "teams distribute")
OMPSS_DIRECTIVE_EXT(teams_distribute_simd, "teams distribute simd")
OMPSS_DIRECTIVE_EXT(teams_distribute_parallel_for_simd, "teams distribute parallel for simd")
OMPSS_DIRECTIVE_EXT(teams_distribute_parallel_for, "teams distribute parallel for")
OMPSS_DIRECTIVE_EXT(target_teams, "target teams")
OMPSS_DIRECTIVE_EXT(target_teams_distribute, "target teams distribute")
OMPSS_DIRECTIVE_EXT(target_teams_distribute_parallel_for, "target teams distribute parallel for")
OMPSS_DIRECTIVE_EXT(target_teams_distribute_parallel_for_simd, "target teams distribute parallel for simd")
OMPSS_DIRECTIVE_EXT(target_teams_distribute_simd, "target teams distribute simd")

// OmpSs clauses.
OMPSS_CLAUSE(if, OSSIfClause)
OMPSS_CLAUSE(final, OSSFinalClause)
OMPSS_CLAUSE(num_threads, OSSNumThreadsClause)
OMPSS_CLAUSE(safelen, OSSSafelenClause)
OMPSS_CLAUSE(simdlen, OSSSimdlenClause)
OMPSS_CLAUSE(collapse, OSSCollapseClause)
OMPSS_CLAUSE(default, OSSDefaultClause)
OMPSS_CLAUSE(private, OSSPrivateClause)
OMPSS_CLAUSE(firstprivate, OSSFirstprivateClause)
OMPSS_CLAUSE(lastprivate, OSSLastprivateClause)
OMPSS_CLAUSE(shared,  OSSSharedClause)
OMPSS_CLAUSE(reduction,  OSSReductionClause)
OMPSS_CLAUSE(linear,  OSSLinearClause)
OMPSS_CLAUSE(aligned, OSSAlignedClause)
OMPSS_CLAUSE(copyin,  OSSCopyinClause)
OMPSS_CLAUSE(copyprivate,  OSSCopyprivateClause)
OMPSS_CLAUSE(proc_bind, OSSProcBindClause)
OMPSS_CLAUSE(schedule, OSSScheduleClause)
OMPSS_CLAUSE(ordered, OSSOrderedClause)
OMPSS_CLAUSE(nowait, OSSNowaitClause)
OMPSS_CLAUSE(untied, OSSUntiedClause)
OMPSS_CLAUSE(mergeable, OSSMergeableClause)
OMPSS_CLAUSE(flush, OSSFlushClause)
OMPSS_CLAUSE(read, OSSReadClause)
OMPSS_CLAUSE(write, OSSWriteClause)
OMPSS_CLAUSE(update, OSSUpdateClause)
OMPSS_CLAUSE(capture, OSSCaptureClause)
OMPSS_CLAUSE(seq_cst, OSSSeqCstClause)
OMPSS_CLAUSE(depend, OSSDependClause)
OMPSS_CLAUSE(device, OSSDeviceClause)
OMPSS_CLAUSE(threads, OSSThreadsClause)
OMPSS_CLAUSE(simd, OSSSIMDClause)
OMPSS_CLAUSE(map, OSSMapClause)
OMPSS_CLAUSE(num_teams, OSSNumTeamsClause)
OMPSS_CLAUSE(thread_limit, OSSThreadLimitClause)
OMPSS_CLAUSE(priority, OSSPriorityClause)
OMPSS_CLAUSE(grainsize, OSSGrainsizeClause)
OMPSS_CLAUSE(nogroup, OSSNogroupClause)
OMPSS_CLAUSE(num_tasks, OSSNumTasksClause)
OMPSS_CLAUSE(hint, OSSHintClause)
OMPSS_CLAUSE(dist_schedule, OSSDistScheduleClause)
OMPSS_CLAUSE(defaultmap, OSSDefaultmapClause)
OMPSS_CLAUSE(to, OSSToClause)
OMPSS_CLAUSE(from, OSSFromClause)
OMPSS_CLAUSE(use_device_ptr, OSSUseDevicePtrClause)
OMPSS_CLAUSE(is_device_ptr, OSSIsDevicePtrClause)
OMPSS_CLAUSE(task_reduction,  OSSTaskReductionClause)
OMPSS_CLAUSE(in_reduction,  OSSInReductionClause)

// Clauses allowed for OmpSs directive 'parallel'.
OMPSS_PARALLEL_CLAUSE(if)
OMPSS_PARALLEL_CLAUSE(num_threads)
OMPSS_PARALLEL_CLAUSE(default)
OMPSS_PARALLEL_CLAUSE(proc_bind)
OMPSS_PARALLEL_CLAUSE(private)
OMPSS_PARALLEL_CLAUSE(firstprivate)
OMPSS_PARALLEL_CLAUSE(shared)
OMPSS_PARALLEL_CLAUSE(reduction)
OMPSS_PARALLEL_CLAUSE(copyin)

// Clauses allowed for directive 'omp simd'.
OMPSS_SIMD_CLAUSE(private)
OMPSS_SIMD_CLAUSE(lastprivate)
OMPSS_SIMD_CLAUSE(linear)
OMPSS_SIMD_CLAUSE(aligned)
OMPSS_SIMD_CLAUSE(safelen)
OMPSS_SIMD_CLAUSE(simdlen)
OMPSS_SIMD_CLAUSE(collapse)
OMPSS_SIMD_CLAUSE(reduction)

// Clauses allowed for directive 'omp for'.
OMPSS_FOR_CLAUSE(private)
OMPSS_FOR_CLAUSE(lastprivate)
OMPSS_FOR_CLAUSE(firstprivate)
OMPSS_FOR_CLAUSE(reduction)
OMPSS_FOR_CLAUSE(collapse)
OMPSS_FOR_CLAUSE(schedule)
OMPSS_FOR_CLAUSE(ordered)
OMPSS_FOR_CLAUSE(nowait)
OMPSS_FOR_CLAUSE(linear)

// Clauses allowed for directive 'omp for simd'.
OMPSS_FOR_SIMD_CLAUSE(private)
OMPSS_FOR_SIMD_CLAUSE(firstprivate)
OMPSS_FOR_SIMD_CLAUSE(lastprivate)
OMPSS_FOR_SIMD_CLAUSE(reduction)
OMPSS_FOR_SIMD_CLAUSE(schedule)
OMPSS_FOR_SIMD_CLAUSE(collapse)
OMPSS_FOR_SIMD_CLAUSE(nowait)
OMPSS_FOR_SIMD_CLAUSE(safelen)
OMPSS_FOR_SIMD_CLAUSE(simdlen)
OMPSS_FOR_SIMD_CLAUSE(linear)
OMPSS_FOR_SIMD_CLAUSE(aligned)
OMPSS_FOR_SIMD_CLAUSE(ordered)

// Clauses allowed for OmpSs directive 'omp sections'.
OMPSS_SECTIONS_CLAUSE(private)
OMPSS_SECTIONS_CLAUSE(lastprivate)
OMPSS_SECTIONS_CLAUSE(firstprivate)
OMPSS_SECTIONS_CLAUSE(reduction)
OMPSS_SECTIONS_CLAUSE(nowait)

// Clauses allowed for directive 'omp single'.
OMPSS_SINGLE_CLAUSE(private)
OMPSS_SINGLE_CLAUSE(firstprivate)
OMPSS_SINGLE_CLAUSE(copyprivate)
OMPSS_SINGLE_CLAUSE(nowait)

// Clauses allowed for OmpSs directive 'cancel'.
OMPSS_CANCEL_CLAUSE(if)

// Static attributes for 'default' clause.
OMPSS_DEFAULT_KIND(none)
OMPSS_DEFAULT_KIND(shared)

// Static attributes for 'proc_bind' clause.
OMPSS_PROC_BIND_KIND(master)
OMPSS_PROC_BIND_KIND(close)
OMPSS_PROC_BIND_KIND(spread)

// Static attributes for 'schedule' clause.
OMPSS_SCHEDULE_KIND(static)
OMPSS_SCHEDULE_KIND(dynamic)
OMPSS_SCHEDULE_KIND(guided)
OMPSS_SCHEDULE_KIND(auto)
OMPSS_SCHEDULE_KIND(runtime)

// Modifiers for 'schedule' clause.
OMPSS_SCHEDULE_MODIFIER(monotonic)
OMPSS_SCHEDULE_MODIFIER(nonmonotonic)
OMPSS_SCHEDULE_MODIFIER(simd)

// Static attributes for 'defaultmap' clause.
OMPSS_DEFAULTMAP_KIND(scalar)

// Modifiers for 'defaultmap' clause.
OMPSS_DEFAULTMAP_MODIFIER(tofrom)

// Static attributes for 'depend' clause.
OMPSS_DEPEND_KIND(in)
OMPSS_DEPEND_KIND(out)
OMPSS_DEPEND_KIND(inout)
OMPSS_DEPEND_KIND(weak)
OMPSS_DEPEND_KIND(source)
OMPSS_DEPEND_KIND(sink)

// Modifiers for 'linear' clause.
OMPSS_LINEAR_KIND(val)
OMPSS_LINEAR_KIND(ref)
OMPSS_LINEAR_KIND(uval)

// Clauses allowed for OmpSs directive 'parallel for'.
OMPSS_PARALLEL_FOR_CLAUSE(if)
OMPSS_PARALLEL_FOR_CLAUSE(num_threads)
OMPSS_PARALLEL_FOR_CLAUSE(default)
OMPSS_PARALLEL_FOR_CLAUSE(proc_bind)
OMPSS_PARALLEL_FOR_CLAUSE(private)
OMPSS_PARALLEL_FOR_CLAUSE(firstprivate)
OMPSS_PARALLEL_FOR_CLAUSE(shared)
OMPSS_PARALLEL_FOR_CLAUSE(reduction)
OMPSS_PARALLEL_FOR_CLAUSE(copyin)
OMPSS_PARALLEL_FOR_CLAUSE(lastprivate)
OMPSS_PARALLEL_FOR_CLAUSE(collapse)
OMPSS_PARALLEL_FOR_CLAUSE(schedule)
OMPSS_PARALLEL_FOR_CLAUSE(ordered)
OMPSS_PARALLEL_FOR_CLAUSE(linear)

// Clauses allowed for OmpSs directive 'parallel for simd'.
OMPSS_PARALLEL_FOR_SIMD_CLAUSE(if)
OMPSS_PARALLEL_FOR_SIMD_CLAUSE(num_threads)
OMPSS_PARALLEL_FOR_SIMD_CLAUSE(default)
OMPSS_PARALLEL_FOR_SIMD_CLAUSE(proc_bind)
OMPSS_PARALLEL_FOR_SIMD_CLAUSE(private)
OMPSS_PARALLEL_FOR_SIMD_CLAUSE(firstprivate)
OMPSS_PARALLEL_FOR_SIMD_CLAUSE(shared)
OMPSS_PARALLEL_FOR_SIMD_CLAUSE(reduction)
OMPSS_PARALLEL_FOR_SIMD_CLAUSE(copyin)
OMPSS_PARALLEL_FOR_SIMD_CLAUSE(lastprivate)
OMPSS_PARALLEL_FOR_SIMD_CLAUSE(collapse)
OMPSS_PARALLEL_FOR_SIMD_CLAUSE(schedule)
OMPSS_PARALLEL_FOR_SIMD_CLAUSE(safelen)
OMPSS_PARALLEL_FOR_SIMD_CLAUSE(simdlen)
OMPSS_PARALLEL_FOR_SIMD_CLAUSE(linear)
OMPSS_PARALLEL_FOR_SIMD_CLAUSE(aligned)
OMPSS_PARALLEL_FOR_SIMD_CLAUSE(ordered)

// Clauses allowed for OmpSs directive 'parallel sections'.
OMPSS_PARALLEL_SECTIONS_CLAUSE(if)
OMPSS_PARALLEL_SECTIONS_CLAUSE(num_threads)
OMPSS_PARALLEL_SECTIONS_CLAUSE(default)
OMPSS_PARALLEL_SECTIONS_CLAUSE(proc_bind)
OMPSS_PARALLEL_SECTIONS_CLAUSE(private)
OMPSS_PARALLEL_SECTIONS_CLAUSE(firstprivate)
OMPSS_PARALLEL_SECTIONS_CLAUSE(shared)
OMPSS_PARALLEL_SECTIONS_CLAUSE(reduction)
OMPSS_PARALLEL_SECTIONS_CLAUSE(copyin)
OMPSS_PARALLEL_SECTIONS_CLAUSE(lastprivate)

// Clauses allowed for OmpSs directive 'task'.
OMPSS_TASK_CLAUSE(if)
OMPSS_TASK_CLAUSE(final)
OMPSS_TASK_CLAUSE(default)
OMPSS_TASK_CLAUSE(private)
OMPSS_TASK_CLAUSE(firstprivate)
OMPSS_TASK_CLAUSE(shared)
OMPSS_TASK_CLAUSE(untied)
OMPSS_TASK_CLAUSE(mergeable)
OMPSS_TASK_CLAUSE(depend)
OMPSS_TASK_CLAUSE(priority)
OMPSS_TASK_CLAUSE(in_reduction)

// Clauses allowed for OmpSs directive 'atomic'.
OMPSS_ATOMIC_CLAUSE(read)
OMPSS_ATOMIC_CLAUSE(write)
OMPSS_ATOMIC_CLAUSE(update)
OMPSS_ATOMIC_CLAUSE(capture)
OMPSS_ATOMIC_CLAUSE(seq_cst)

// Clauses allowed for OmpSs directive 'target'.
OMPSS_TARGET_CLAUSE(if)
OMPSS_TARGET_CLAUSE(device)
OMPSS_TARGET_CLAUSE(map)
OMPSS_TARGET_CLAUSE(private)
OMPSS_TARGET_CLAUSE(nowait)
OMPSS_TARGET_CLAUSE(depend)
OMPSS_TARGET_CLAUSE(defaultmap)
OMPSS_TARGET_CLAUSE(firstprivate)
OMPSS_TARGET_CLAUSE(is_device_ptr)
OMPSS_TARGET_CLAUSE(reduction)

// Clauses allowed for OmpSs directive 'target data'.
OMPSS_TARGET_DATA_CLAUSE(if)
OMPSS_TARGET_DATA_CLAUSE(device)
OMPSS_TARGET_DATA_CLAUSE(map)
OMPSS_TARGET_DATA_CLAUSE(use_device_ptr)

// Clauses allowed for OmpSs directive 'target enter data'.
OMPSS_TARGET_ENTER_DATA_CLAUSE(if)
OMPSS_TARGET_ENTER_DATA_CLAUSE(device)
OMPSS_TARGET_ENTER_DATA_CLAUSE(map)
OMPSS_TARGET_ENTER_DATA_CLAUSE(nowait)
OMPSS_TARGET_ENTER_DATA_CLAUSE(depend)

// Clauses allowed for OmpSs directive 'target exit data'.
OMPSS_TARGET_EXIT_DATA_CLAUSE(if)
OMPSS_TARGET_EXIT_DATA_CLAUSE(device)
OMPSS_TARGET_EXIT_DATA_CLAUSE(map)
OMPSS_TARGET_EXIT_DATA_CLAUSE(nowait)
OMPSS_TARGET_EXIT_DATA_CLAUSE(depend)

// Clauses allowed for OmpSs directive 'target parallel'.
OMPSS_TARGET_PARALLEL_CLAUSE(if)
OMPSS_TARGET_PARALLEL_CLAUSE(device)
OMPSS_TARGET_PARALLEL_CLAUSE(map)
OMPSS_TARGET_PARALLEL_CLAUSE(private)
OMPSS_TARGET_PARALLEL_CLAUSE(firstprivate)
OMPSS_TARGET_PARALLEL_CLAUSE(nowait)
OMPSS_TARGET_PARALLEL_CLAUSE(depend)
OMPSS_TARGET_PARALLEL_CLAUSE(defaultmap)
OMPSS_TARGET_PARALLEL_CLAUSE(num_threads)
OMPSS_TARGET_PARALLEL_CLAUSE(default)
OMPSS_TARGET_PARALLEL_CLAUSE(proc_bind)
OMPSS_TARGET_PARALLEL_CLAUSE(shared)
OMPSS_TARGET_PARALLEL_CLAUSE(reduction)
OMPSS_TARGET_PARALLEL_CLAUSE(is_device_ptr)

// Clauses allowed for OmpSs directive 'target parallel for'.
OMPSS_TARGET_PARALLEL_FOR_CLAUSE(if)
OMPSS_TARGET_PARALLEL_FOR_CLAUSE(device)
OMPSS_TARGET_PARALLEL_FOR_CLAUSE(map)
OMPSS_TARGET_PARALLEL_FOR_CLAUSE(private)
OMPSS_TARGET_PARALLEL_FOR_CLAUSE(firstprivate)
OMPSS_TARGET_PARALLEL_FOR_CLAUSE(lastprivate)
OMPSS_TARGET_PARALLEL_FOR_CLAUSE(nowait)
OMPSS_TARGET_PARALLEL_FOR_CLAUSE(depend)
OMPSS_TARGET_PARALLEL_FOR_CLAUSE(defaultmap)
OMPSS_TARGET_PARALLEL_FOR_CLAUSE(num_threads)
OMPSS_TARGET_PARALLEL_FOR_CLAUSE(default)
OMPSS_TARGET_PARALLEL_FOR_CLAUSE(proc_bind)
OMPSS_TARGET_PARALLEL_FOR_CLAUSE(shared)
OMPSS_TARGET_PARALLEL_FOR_CLAUSE(reduction)
OMPSS_TARGET_PARALLEL_FOR_CLAUSE(collapse)
OMPSS_TARGET_PARALLEL_FOR_CLAUSE(schedule)
OMPSS_TARGET_PARALLEL_FOR_CLAUSE(ordered)
OMPSS_TARGET_PARALLEL_FOR_CLAUSE(linear)
OMPSS_TARGET_PARALLEL_FOR_CLAUSE(is_device_ptr)

// Clauses allowed for OmpSs directive 'target update'.
OMPSS_TARGET_UPDATE_CLAUSE(if)
OMPSS_TARGET_UPDATE_CLAUSE(device)
OMPSS_TARGET_UPDATE_CLAUSE(to)
OMPSS_TARGET_UPDATE_CLAUSE(from)
OMPSS_TARGET_UPDATE_CLAUSE(nowait)
OMPSS_TARGET_UPDATE_CLAUSE(depend)

// Clauses allowed for OmpSs directive 'teams'.
OMPSS_TEAMS_CLAUSE(default)
OMPSS_TEAMS_CLAUSE(private)
OMPSS_TEAMS_CLAUSE(firstprivate)
OMPSS_TEAMS_CLAUSE(shared)
OMPSS_TEAMS_CLAUSE(reduction)
OMPSS_TEAMS_CLAUSE(num_teams)
OMPSS_TEAMS_CLAUSE(thread_limit)

// Clauses allowed for OmpSs directive 'ordered'.
OMPSS_ORDERED_CLAUSE(threads)
OMPSS_ORDERED_CLAUSE(simd)
OMPSS_ORDERED_CLAUSE(depend)

// Map types and map type modifier for 'map' clause.
OMPSS_MAP_KIND(alloc)
OMPSS_MAP_KIND(to)
OMPSS_MAP_KIND(from)
OMPSS_MAP_KIND(tofrom)
OMPSS_MAP_KIND(delete)
OMPSS_MAP_KIND(release)
OMPSS_MAP_KIND(always)

// Clauses allowed for OmpSs directive 'taskloop'.
OMPSS_TASKLOOP_CLAUSE(if)
OMPSS_TASKLOOP_CLAUSE(shared)
OMPSS_TASKLOOP_CLAUSE(private)
OMPSS_TASKLOOP_CLAUSE(firstprivate)
OMPSS_TASKLOOP_CLAUSE(lastprivate)
OMPSS_TASKLOOP_CLAUSE(default)
OMPSS_TASKLOOP_CLAUSE(collapse)
OMPSS_TASKLOOP_CLAUSE(final)
OMPSS_TASKLOOP_CLAUSE(untied)
OMPSS_TASKLOOP_CLAUSE(mergeable)
OMPSS_TASKLOOP_CLAUSE(priority)
OMPSS_TASKLOOP_CLAUSE(grainsize)
OMPSS_TASKLOOP_CLAUSE(nogroup)
OMPSS_TASKLOOP_CLAUSE(num_tasks)
OMPSS_TASKLOOP_CLAUSE(reduction)
OMPSS_TASKLOOP_CLAUSE(in_reduction)

// Clauses allowed for OmpSs directive 'taskloop simd'.
OMPSS_TASKLOOP_SIMD_CLAUSE(if)
OMPSS_TASKLOOP_SIMD_CLAUSE(shared)
OMPSS_TASKLOOP_SIMD_CLAUSE(private)
OMPSS_TASKLOOP_SIMD_CLAUSE(firstprivate)
OMPSS_TASKLOOP_SIMD_CLAUSE(lastprivate)
OMPSS_TASKLOOP_SIMD_CLAUSE(default)
OMPSS_TASKLOOP_SIMD_CLAUSE(collapse)
OMPSS_TASKLOOP_SIMD_CLAUSE(final)
OMPSS_TASKLOOP_SIMD_CLAUSE(untied)
OMPSS_TASKLOOP_SIMD_CLAUSE(mergeable)
OMPSS_TASKLOOP_SIMD_CLAUSE(priority)
OMPSS_TASKLOOP_SIMD_CLAUSE(linear)
OMPSS_TASKLOOP_SIMD_CLAUSE(aligned)
OMPSS_TASKLOOP_SIMD_CLAUSE(safelen)
OMPSS_TASKLOOP_SIMD_CLAUSE(simdlen)
OMPSS_TASKLOOP_SIMD_CLAUSE(grainsize)
OMPSS_TASKLOOP_SIMD_CLAUSE(nogroup)
OMPSS_TASKLOOP_SIMD_CLAUSE(num_tasks)
OMPSS_TASKLOOP_SIMD_CLAUSE(reduction)
OMPSS_TASKLOOP_SIMD_CLAUSE(in_reduction)

// Clauses allowed for OmpSs directive 'critical'.
OMPSS_CRITICAL_CLAUSE(hint)

// Clauses allowed for OmpSs directive 'distribute'
OMPSS_DISTRIBUTE_CLAUSE(private)
OMPSS_DISTRIBUTE_CLAUSE(firstprivate)
OMPSS_DISTRIBUTE_CLAUSE(lastprivate)
OMPSS_DISTRIBUTE_CLAUSE(collapse)
OMPSS_DISTRIBUTE_CLAUSE(dist_schedule)

// Static attributes for 'dist_schedule' clause.
OMPSS_DIST_SCHEDULE_KIND(static)

// Clauses allowed for OmpSs directive 'distribute parallel for'
OMPSS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(firstprivate)
OMPSS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(lastprivate)
OMPSS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(collapse)
OMPSS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(dist_schedule)
OMPSS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(if)
OMPSS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(num_threads)
OMPSS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(default)
OMPSS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(proc_bind)
OMPSS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(private)
OMPSS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(shared)
OMPSS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(reduction)
OMPSS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(copyin)
OMPSS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(schedule)

// Clauses allowed for OmpSs directive 'distribute parallel for simd'
OMPSS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(firstprivate)
OMPSS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(lastprivate)
OMPSS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(collapse)
OMPSS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(dist_schedule)
OMPSS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(if)
OMPSS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(num_threads)
OMPSS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(default)
OMPSS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(proc_bind)
OMPSS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(private)
OMPSS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(shared)
OMPSS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(reduction)
OMPSS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(copyin)
OMPSS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(schedule)
OMPSS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(linear)
OMPSS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(aligned)
OMPSS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(safelen)
OMPSS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(simdlen)

// Clauses allowed for OmpSs directive 'distribute simd'
OMPSS_DISTRIBUTE_SIMD_CLAUSE(private)
OMPSS_DISTRIBUTE_SIMD_CLAUSE(firstprivate)
OMPSS_DISTRIBUTE_SIMD_CLAUSE(lastprivate)
OMPSS_DISTRIBUTE_SIMD_CLAUSE(collapse)
OMPSS_DISTRIBUTE_SIMD_CLAUSE(dist_schedule)
OMPSS_DISTRIBUTE_SIMD_CLAUSE(linear)
OMPSS_DISTRIBUTE_SIMD_CLAUSE(aligned)
OMPSS_DISTRIBUTE_SIMD_CLAUSE(safelen)
OMPSS_DISTRIBUTE_SIMD_CLAUSE(simdlen)
OMPSS_DISTRIBUTE_SIMD_CLAUSE(reduction)

// Clauses allowed for OmpSs directive 'target parallel for simd'.
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(if)
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(device)
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(map)
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(private)
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(firstprivate)
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(lastprivate)
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(nowait)
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(depend)
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(defaultmap)
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(num_threads)
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(default)
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(proc_bind)
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(shared)
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(reduction)
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(collapse)
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(schedule)
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(ordered)
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(linear)
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(safelen)
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(simdlen)
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(aligned)
OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE(is_device_ptr)

// Clauses allowed for OmpSs directive 'target simd'.
OMPSS_TARGET_SIMD_CLAUSE(if)
OMPSS_TARGET_SIMD_CLAUSE(device)
OMPSS_TARGET_SIMD_CLAUSE(map)
OMPSS_TARGET_SIMD_CLAUSE(private)
OMPSS_TARGET_SIMD_CLAUSE(nowait)
OMPSS_TARGET_SIMD_CLAUSE(depend)
OMPSS_TARGET_SIMD_CLAUSE(defaultmap)
OMPSS_TARGET_SIMD_CLAUSE(firstprivate)
OMPSS_TARGET_SIMD_CLAUSE(is_device_ptr)
OMPSS_TARGET_SIMD_CLAUSE(lastprivate)
OMPSS_TARGET_SIMD_CLAUSE(linear)
OMPSS_TARGET_SIMD_CLAUSE(aligned)
OMPSS_TARGET_SIMD_CLAUSE(safelen)
OMPSS_TARGET_SIMD_CLAUSE(simdlen)
OMPSS_TARGET_SIMD_CLAUSE(collapse)
OMPSS_TARGET_SIMD_CLAUSE(reduction)

// Clauses allowed for OmpSs directive 'teams distribute'.
OMPSS_TEAMS_DISTRIBUTE_CLAUSE(default)
OMPSS_TEAMS_DISTRIBUTE_CLAUSE(private)
OMPSS_TEAMS_DISTRIBUTE_CLAUSE(firstprivate)
OMPSS_TEAMS_DISTRIBUTE_CLAUSE(shared)
OMPSS_TEAMS_DISTRIBUTE_CLAUSE(reduction)
OMPSS_TEAMS_DISTRIBUTE_CLAUSE(num_teams)
OMPSS_TEAMS_DISTRIBUTE_CLAUSE(thread_limit)
OMPSS_TEAMS_DISTRIBUTE_CLAUSE(lastprivate)
OMPSS_TEAMS_DISTRIBUTE_CLAUSE(collapse)
OMPSS_TEAMS_DISTRIBUTE_CLAUSE(dist_schedule)

// Clauses allowed for OmpSs directive 'teams distribute simd'
OMPSS_TEAMS_DISTRIBUTE_SIMD_CLAUSE(default)
OMPSS_TEAMS_DISTRIBUTE_SIMD_CLAUSE(private)
OMPSS_TEAMS_DISTRIBUTE_SIMD_CLAUSE(firstprivate)
OMPSS_TEAMS_DISTRIBUTE_SIMD_CLAUSE(shared)
OMPSS_TEAMS_DISTRIBUTE_SIMD_CLAUSE(reduction)
OMPSS_TEAMS_DISTRIBUTE_SIMD_CLAUSE(num_teams)
OMPSS_TEAMS_DISTRIBUTE_SIMD_CLAUSE(thread_limit)
OMPSS_TEAMS_DISTRIBUTE_SIMD_CLAUSE(lastprivate)
OMPSS_TEAMS_DISTRIBUTE_SIMD_CLAUSE(collapse)
OMPSS_TEAMS_DISTRIBUTE_SIMD_CLAUSE(dist_schedule)
OMPSS_TEAMS_DISTRIBUTE_SIMD_CLAUSE(linear)
OMPSS_TEAMS_DISTRIBUTE_SIMD_CLAUSE(aligned)
OMPSS_TEAMS_DISTRIBUTE_SIMD_CLAUSE(safelen)
OMPSS_TEAMS_DISTRIBUTE_SIMD_CLAUSE(simdlen)

// Clauses allowed for OmpSs directive 'teams distribute parallel for simd'
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(firstprivate)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(lastprivate)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(collapse)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(dist_schedule)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(if)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(num_threads)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(default)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(proc_bind)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(private)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(shared)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(reduction)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(schedule)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(linear)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(aligned)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(safelen)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(simdlen)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(num_teams)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(thread_limit)

// Clauses allowed for OmpSs directive 'teams distribute parallel for'
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(firstprivate)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(lastprivate)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(collapse)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(dist_schedule)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(if)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(num_threads)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(default)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(proc_bind)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(private)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(shared)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(reduction)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(schedule)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(num_teams)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(thread_limit)
OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(copyin)

// Clauses allowed for OmpSs directive 'target teams'.
OMPSS_TARGET_TEAMS_CLAUSE(if)
OMPSS_TARGET_TEAMS_CLAUSE(device)
OMPSS_TARGET_TEAMS_CLAUSE(map)
OMPSS_TARGET_TEAMS_CLAUSE(private)
OMPSS_TARGET_TEAMS_CLAUSE(nowait)
OMPSS_TARGET_TEAMS_CLAUSE(depend)
OMPSS_TARGET_TEAMS_CLAUSE(defaultmap)
OMPSS_TARGET_TEAMS_CLAUSE(firstprivate)
OMPSS_TARGET_TEAMS_CLAUSE(is_device_ptr)
OMPSS_TARGET_TEAMS_CLAUSE(default)
OMPSS_TARGET_TEAMS_CLAUSE(shared)
OMPSS_TARGET_TEAMS_CLAUSE(reduction)
OMPSS_TARGET_TEAMS_CLAUSE(num_teams)
OMPSS_TARGET_TEAMS_CLAUSE(thread_limit)

// Clauses allowed for OmpSs directive 'target teams distribute'.
OMPSS_TARGET_TEAMS_DISTRIBUTE_CLAUSE(if)
OMPSS_TARGET_TEAMS_DISTRIBUTE_CLAUSE(device)
OMPSS_TARGET_TEAMS_DISTRIBUTE_CLAUSE(map)
OMPSS_TARGET_TEAMS_DISTRIBUTE_CLAUSE(private)
OMPSS_TARGET_TEAMS_DISTRIBUTE_CLAUSE(nowait)
OMPSS_TARGET_TEAMS_DISTRIBUTE_CLAUSE(depend)
OMPSS_TARGET_TEAMS_DISTRIBUTE_CLAUSE(defaultmap)
OMPSS_TARGET_TEAMS_DISTRIBUTE_CLAUSE(firstprivate)
OMPSS_TARGET_TEAMS_DISTRIBUTE_CLAUSE(is_device_ptr)
OMPSS_TARGET_TEAMS_DISTRIBUTE_CLAUSE(default)
OMPSS_TARGET_TEAMS_DISTRIBUTE_CLAUSE(shared)
OMPSS_TARGET_TEAMS_DISTRIBUTE_CLAUSE(reduction)
OMPSS_TARGET_TEAMS_DISTRIBUTE_CLAUSE(num_teams)
OMPSS_TARGET_TEAMS_DISTRIBUTE_CLAUSE(thread_limit)
OMPSS_TARGET_TEAMS_DISTRIBUTE_CLAUSE(lastprivate)
OMPSS_TARGET_TEAMS_DISTRIBUTE_CLAUSE(collapse)
OMPSS_TARGET_TEAMS_DISTRIBUTE_CLAUSE(dist_schedule)

// Clauses allowed for OmpSs directive 'target teams distribute parallel for'.
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(if)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(device)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(map)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(private)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(nowait)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(depend)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(defaultmap)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(firstprivate)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(is_device_ptr)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(default)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(shared)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(reduction)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(num_teams)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(thread_limit)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(lastprivate)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(collapse)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(dist_schedule)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(num_threads)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(proc_bind)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE(schedule)

// Clauses allowed for OmpSs directive
// 'target teams distribute parallel for simd'.
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(if)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(device)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(map)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(private)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(nowait)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(depend)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(defaultmap)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(firstprivate)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(is_device_ptr)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(default)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(shared)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(reduction)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(num_teams)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(thread_limit)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(lastprivate)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(collapse)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(dist_schedule)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(num_threads)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(proc_bind)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(schedule)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(linear)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(aligned)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(safelen)
OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE(simdlen)

// Clauses allowed for OmpSs directive 'target teams distribute simd'.
OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE(if)
OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE(device)
OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE(map)
OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE(private)
OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE(nowait)
OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE(depend)
OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE(defaultmap)
OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE(firstprivate)
OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE(lastprivate)
OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE(is_device_ptr)
OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE(shared)
OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE(reduction)
OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE(num_teams)
OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE(thread_limit)
OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE(collapse)
OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE(dist_schedule)
OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE(linear)
OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE(aligned)
OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE(safelen)
OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE(simdlen)

// Clauses allowed for OmpSs directive 'taskgroup'.
OMPSS_TASKGROUP_CLAUSE(task_reduction)

#undef OMPSS_TASKGROUP_CLAUSE
#undef OMPSS_TASKLOOP_SIMD_CLAUSE
#undef OMPSS_TASKLOOP_CLAUSE
#undef OMPSS_LINEAR_KIND
#undef OMPSS_DEPEND_KIND
#undef OMPSS_SCHEDULE_MODIFIER
#undef OMPSS_SCHEDULE_KIND
#undef OMPSS_PROC_BIND_KIND
#undef OMPSS_DEFAULT_KIND
#undef OMPSS_DIRECTIVE
#undef OMPSS_DIRECTIVE_EXT
#undef OMPSS_CLAUSE
#undef OMPSS_CRITICAL_CLAUSE
#undef OMPSS_ORDERED_CLAUSE
#undef OMPSS_CANCEL_CLAUSE
#undef OMPSS_SINGLE_CLAUSE
#undef OMPSS_SECTIONS_CLAUSE
#undef OMPSS_PARALLEL_CLAUSE
#undef OMPSS_PARALLEL_FOR_CLAUSE
#undef OMPSS_PARALLEL_FOR_SIMD_CLAUSE
#undef OMPSS_PARALLEL_SECTIONS_CLAUSE
#undef OMPSS_TASK_CLAUSE
#undef OMPSS_ATOMIC_CLAUSE
#undef OMPSS_TARGET_CLAUSE
#undef OMPSS_TARGET_DATA_CLAUSE
#undef OMPSS_TARGET_ENTER_DATA_CLAUSE
#undef OMPSS_TARGET_EXIT_DATA_CLAUSE
#undef OMPSS_TARGET_PARALLEL_CLAUSE
#undef OMPSS_TARGET_PARALLEL_FOR_CLAUSE
#undef OMPSS_TEAMS_CLAUSE
#undef OMPSS_SIMD_CLAUSE
#undef OMPSS_FOR_CLAUSE
#undef OMPSS_FOR_SIMD_CLAUSE
#undef OMPSS_MAP_KIND
#undef OMPSS_DISTRIBUTE_CLAUSE
#undef OMPSS_DIST_SCHEDULE_KIND
#undef OMPSS_DEFAULTMAP_KIND
#undef OMPSS_DEFAULTMAP_MODIFIER
#undef OMPSS_TARGET_UPDATE_CLAUSE
#undef OMPSS_DISTRIBUTE_PARALLEL_FOR_CLAUSE
#undef OMPSS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE
#undef OMPSS_DISTRIBUTE_SIMD_CLAUSE
#undef OMPSS_TARGET_PARALLEL_FOR_SIMD_CLAUSE
#undef OMPSS_TARGET_SIMD_CLAUSE
#undef OMPSS_TEAMS_DISTRIBUTE_CLAUSE
#undef OMPSS_TEAMS_DISTRIBUTE_SIMD_CLAUSE
#undef OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE
#undef OMPSS_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE
#undef OMPSS_TARGET_TEAMS_CLAUSE
#undef OMPSS_TARGET_TEAMS_DISTRIBUTE_CLAUSE
#undef OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_CLAUSE
#undef OMPSS_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_CLAUSE
#undef OMPSS_TARGET_TEAMS_DISTRIBUTE_SIMD_CLAUSE
