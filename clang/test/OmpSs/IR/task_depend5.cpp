// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --include-generated-funcs
// RUN: %clang_cc1 -verify -fompss-2 -disable-llvm-passes -ferror-limit 100 %s -S -emit-llvm -o - | FileCheck %s
// expected-no-diagnostics

int bar();

void foo() {
    int array[10];
    #pragma oss task in(array[bar()])
    {}
}


// CHECK-LABEL: @_Z3foov(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[ARRAY:%.*]] = alloca [10 x i32], align 16
// CHECK-NEXT:    [[TMP0:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"(ptr [[ARRAY]], [10 x i32] undef), "QUAL.OSS.DEP.IN"(ptr [[ARRAY]], [13 x i8] c"array[bar()]\00", ptr @compute_dep, ptr [[ARRAY]]) ], !dbg [[DBG9:![0-9]+]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]), !dbg [[DBG10:![0-9]+]]
// CHECK-NEXT:    ret void, !dbg [[DBG11:![0-9]+]]
//
//
// CHECK-LABEL: @compute_dep(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T:%.*]], align 8
// CHECK-NEXT:    [[ARRAY_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[ARRAY:%.*]], ptr [[ARRAY_ADDR]], align 8
// CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @_Z3barv(), !dbg [[DBG13:![0-9]+]]
// CHECK-NEXT:    [[TMP0:%.*]] = sext i32 [[CALL]] to i64
// CHECK-NEXT:    [[TMP1:%.*]] = add i64 [[TMP0]], 1
// CHECK-NEXT:    [[ARRAYDECAY:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAY]], i64 0, i64 0, !dbg [[DBG15:![0-9]+]]
// CHECK-NEXT:    [[TMP2:%.*]] = mul i64 [[TMP0]], 4
// CHECK-NEXT:    [[TMP3:%.*]] = mul i64 [[TMP1]], 4
// CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 0
// CHECK-NEXT:    store ptr [[ARRAYDECAY]], ptr [[TMP4]], align 8
// CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 1
// CHECK-NEXT:    store i64 40, ptr [[TMP5]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 2
// CHECK-NEXT:    store i64 [[TMP2]], ptr [[TMP6]], align 8
// CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 3
// CHECK-NEXT:    store i64 [[TMP3]], ptr [[TMP7]], align 8
// CHECK-NEXT:    [[TMP8:%.*]] = load [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], align 8, !dbg [[DBG15]]
// CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T]] [[TMP8]], !dbg [[DBG15]]
//
