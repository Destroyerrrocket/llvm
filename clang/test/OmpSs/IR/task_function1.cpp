// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
// RUN: %clang_cc1 -verify -fompss-2 -disable-llvm-passes -ferror-limit 100 %s -S -emit-llvm -o - | FileCheck %s
// expected-no-diagnostics

// References are passed as shared so task outline can modify
// the original variable

#pragma oss task in([1]p)
void foo(int &x, int *&p) {}

int main() {
    int array[10];
    int *p = array;
    foo(*(array + 4), p);
}

// CHECK-LABEL: define {{[^@]+}}@_Z3fooRiRPi
// CHECK-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[X:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[P:%.*]]) #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[X_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[P_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[X]], ptr [[X_ADDR]], align 8
// CHECK-NEXT:    store ptr [[P]], ptr [[P_ADDR]], align 8
// CHECK-NEXT:    ret void, !dbg [[DBG9:![0-9]+]]
//
//
// CHECK-LABEL: define {{[^@]+}}@main
// CHECK-SAME: () #[[ATTR1:[0-9]+]] !dbg [[DBG10:![0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[ARRAY:%.*]] = alloca [10 x i32], align 16
// CHECK-NEXT:    [[P:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[CALL_ARG:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[CALL_ARG2:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[ARRAYDECAY:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAY]], i64 0, i64 0, !dbg [[DBG11:![0-9]+]]
// CHECK-NEXT:    store ptr [[ARRAYDECAY]], ptr [[P]], align 8, !dbg [[DBG12:![0-9]+]]
// CHECK-NEXT:    [[ARRAYDECAY1:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAY]], i64 0, i64 0, !dbg [[DBG13:![0-9]+]]
// CHECK-NEXT:    [[ADD_PTR:%.*]] = getelementptr inbounds i32, ptr [[ARRAYDECAY1]], i64 4, !dbg [[DBG14:![0-9]+]]
// CHECK-NEXT:    store ptr [[ADD_PTR]], ptr [[CALL_ARG]], align 8, !dbg [[DBG15:![0-9]+]]
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[CALL_ARG]], align 8, !dbg [[DBG15]]
// CHECK-NEXT:    store ptr [[P]], ptr [[CALL_ARG2]], align 8, !dbg [[DBG16:![0-9]+]]
// CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[CALL_ARG2]], align 8, !dbg [[DBG16]]
// CHECK-NEXT:    [[TMP2:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"(ptr [[TMP0]], i32 undef), "QUAL.OSS.SHARED"(ptr [[TMP1]], ptr undef), "QUAL.OSS.DEP.IN"(ptr [[TMP1]], [5 x i8] c"[1]p\00", ptr @compute_dep, ptr [[TMP1]]), "QUAL.OSS.DECL.SOURCE"([8 x i8] c"foo:8:9\00") ], !dbg [[DBG17:![0-9]+]]
// CHECK-NEXT:    call void @_Z3fooRiRPi(ptr noundef nonnull align 4 dereferenceable(4) [[TMP0]], ptr noundef nonnull align 8 dereferenceable(8) [[TMP1]]), !dbg [[DBG17]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP2]]), !dbg [[DBG17]]
// CHECK-NEXT:    ret i32 0, !dbg [[DBG18:![0-9]+]]
//
//
// CHECK-LABEL: define {{[^@]+}}@compute_dep
// CHECK-SAME: (ptr [[P:%.*]]) #[[ATTR3:[0-9]+]] !dbg [[DBG19:![0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T:%.*]], align 8
// CHECK-NEXT:    [[P_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[P]], ptr [[P_ADDR]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[P]], align 8, !dbg [[DBG20:![0-9]+]]
// CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 0
// CHECK-NEXT:    store ptr [[TMP0]], ptr [[TMP1]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 1
// CHECK-NEXT:    store i64 4, ptr [[TMP2]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 2
// CHECK-NEXT:    store i64 0, ptr [[TMP3]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 3
// CHECK-NEXT:    store i64 4, ptr [[TMP4]], align 8
// CHECK-NEXT:    [[TMP5:%.*]] = load [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], align 8, !dbg [[DBG20]]
// CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T]] [[TMP5]], !dbg [[DBG20]]
//
