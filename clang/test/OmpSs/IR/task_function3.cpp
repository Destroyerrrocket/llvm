// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
// RUN: %clang_cc1 -verify -fompss-2 -disable-llvm-passes -ferror-limit 100 %s -S -emit-llvm -o - | FileCheck %s
// expected-no-diagnostics

struct S {
    int x;
    #pragma oss task
    void foo1(int x) {}
};

void bar() {
    S s;
    s.foo1(1 + 2);
    S *p;
    p->foo1(1 + 2);
}



// CHECK-LABEL: define {{[^@]+}}@_Z3barv
// CHECK-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[S:%.*]] = alloca [[STRUCT_S:%.*]], align 4
// CHECK-NEXT:    [[CALL_ARG:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[CALL_ARG1:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[P:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[CALL_ARG2:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[CALL_ARG3:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store i32 3, ptr [[CALL_ARG]], align 4, !dbg [[DBG9:![0-9]+]]
// CHECK-NEXT:    store ptr [[S]], ptr [[CALL_ARG1]], align 8, !dbg [[DBG10:![0-9]+]]
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[CALL_ARG1]], align 8, !dbg [[DBG10]]
// CHECK-NEXT:    [[TMP1:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"(ptr [[TMP0]], [[STRUCT_S]] undef), "QUAL.OSS.FIRSTPRIVATE"(ptr [[CALL_ARG]], i32 undef), "QUAL.OSS.DECL.SOURCE"([10 x i8] c"foo1:7:13\00") ], !dbg [[DBG11:![0-9]+]]
// CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[CALL_ARG]], align 4, !dbg [[DBG9]]
// CHECK-NEXT:    call void @_ZN1S4foo1Ei(ptr noundef nonnull align 4 dereferenceable(4) [[TMP0]], i32 noundef [[TMP2]]), !dbg [[DBG11]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP1]]), !dbg [[DBG11]]
// CHECK-NEXT:    store i32 3, ptr [[CALL_ARG2]], align 4, !dbg [[DBG12:![0-9]+]]
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[P]], align 8, !dbg [[DBG13:![0-9]+]]
// CHECK-NEXT:    store ptr [[TMP3]], ptr [[CALL_ARG3]], align 8, !dbg [[DBG13]]
// CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[CALL_ARG3]], align 8, !dbg [[DBG13]]
// CHECK-NEXT:    [[TMP5:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"(ptr [[TMP4]], [[STRUCT_S]] undef), "QUAL.OSS.FIRSTPRIVATE"(ptr [[CALL_ARG2]], i32 undef), "QUAL.OSS.DECL.SOURCE"([10 x i8] c"foo1:7:13\00") ], !dbg [[DBG14:![0-9]+]]
// CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr [[CALL_ARG2]], align 4, !dbg [[DBG12]]
// CHECK-NEXT:    call void @_ZN1S4foo1Ei(ptr noundef nonnull align 4 dereferenceable(4) [[TMP4]], i32 noundef [[TMP6]]), !dbg [[DBG14]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP5]]), !dbg [[DBG14]]
// CHECK-NEXT:    ret void, !dbg [[DBG15:![0-9]+]]
//
//
// CHECK-LABEL: define {{[^@]+}}@_ZN1S4foo1Ei
// CHECK-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[THIS:%.*]], i32 noundef [[X:%.*]]) #[[ATTR0]] comdat align 2 !dbg [[DBG16:![0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[X_ADDR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CHECK-NEXT:    store i32 [[X]], ptr [[X_ADDR]], align 4
// CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CHECK-NEXT:    ret void, !dbg [[DBG17:![0-9]+]]
//
