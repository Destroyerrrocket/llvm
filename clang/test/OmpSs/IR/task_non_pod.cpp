// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --include-generated-funcs
// RUN: %clang_cc1 -x c++ -verify -fompss-2 -disable-llvm-passes -ferror-limit 100 %s -S -emit-llvm -o - | FileCheck %s
// expected-no-diagnostics

struct S {
    int x;
    S();
    S(S& s, int x = 0);
    S(const S& s, int x = 0);
    ~S();
};

using Q = S;

// In theory we are going to generate a init/deinit/copy function once

void foo() {
    Q s[10][20];
    Q (&rs)[10][20] = s;
    S s1[10][20];
    Q (&rs1)[10][20] = s1;
    #pragma oss task firstprivate(rs, rs1, s, s1)
    {}
    #pragma oss task private(rs, rs1, s, s1)
    {}
}






int main() {
    Q x;
    Q &rx = x;
    S x1;
    S &rx1 = x1;
    #pragma oss task firstprivate(rx, rx1, x, x1)
    {}
    #pragma oss task private(rx, rx1, x, x1)
    {}
    return 0;
}



S s;
S &rs = s;
extern S &res;
void global_ref() {
    #pragma oss task in(res.x, rs.x)
    {}
}



// CHECK-LABEL: @_Z3foov(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[S:%.*]] = alloca [10 x [20 x %struct.S]], align 16
// CHECK-NEXT:    [[RS:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[S1:%.*]] = alloca [10 x [20 x %struct.S]], align 16
// CHECK-NEXT:    [[RS1:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[ARRAY_BEGIN:%.*]] = getelementptr inbounds [10 x [20 x %struct.S]], ptr [[S]], i32 0, i32 0, i32 0, !dbg [[DBG9:![0-9]+]]
// CHECK-NEXT:    [[ARRAYCTOR_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[ARRAY_BEGIN]], i64 200, !dbg [[DBG9]]
// CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]], !dbg [[DBG9]]
// CHECK:       arrayctor.loop:
// CHECK-NEXT:    [[ARRAYCTOR_CUR:%.*]] = phi ptr [ [[ARRAY_BEGIN]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG9]]
// CHECK-NEXT:    call void @_ZN1SC1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[ARRAYCTOR_CUR]]), !dbg [[DBG9]]
// CHECK-NEXT:    [[ARRAYCTOR_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_CUR]], i64 1, !dbg [[DBG9]]
// CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_NEXT]], [[ARRAYCTOR_END]], !dbg [[DBG9]]
// CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]], !dbg [[DBG9]]
// CHECK:       arrayctor.cont:
// CHECK-NEXT:    store ptr [[S]], ptr [[RS]], align 8, !dbg [[DBG10:![0-9]+]]
// CHECK-NEXT:    [[ARRAY_BEGIN1:%.*]] = getelementptr inbounds [10 x [20 x %struct.S]], ptr [[S1]], i32 0, i32 0, i32 0, !dbg [[DBG11:![0-9]+]]
// CHECK-NEXT:    [[ARRAYCTOR_END2:%.*]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAY_BEGIN1]], i64 200, !dbg [[DBG11]]
// CHECK-NEXT:    br label [[ARRAYCTOR_LOOP3:%.*]], !dbg [[DBG11]]
// CHECK:       arrayctor.loop3:
// CHECK-NEXT:    [[ARRAYCTOR_CUR4:%.*]] = phi ptr [ [[ARRAY_BEGIN1]], [[ARRAYCTOR_CONT]] ], [ [[ARRAYCTOR_NEXT5:%.*]], [[ARRAYCTOR_LOOP3]] ], !dbg [[DBG11]]
// CHECK-NEXT:    call void @_ZN1SC1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[ARRAYCTOR_CUR4]]), !dbg [[DBG11]]
// CHECK-NEXT:    [[ARRAYCTOR_NEXT5]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_CUR4]], i64 1, !dbg [[DBG11]]
// CHECK-NEXT:    [[ARRAYCTOR_DONE6:%.*]] = icmp eq ptr [[ARRAYCTOR_NEXT5]], [[ARRAYCTOR_END2]], !dbg [[DBG11]]
// CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE6]], label [[ARRAYCTOR_CONT7:%.*]], label [[ARRAYCTOR_LOOP3]], !dbg [[DBG11]]
// CHECK:       arrayctor.cont7:
// CHECK-NEXT:    store ptr [[S1]], ptr [[RS1]], align 8, !dbg [[DBG12:![0-9]+]]
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[RS]], align 8, !dbg [[DBG13:![0-9]+]]
// CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[RS1]], align 8, !dbg [[DBG13]]
// CHECK-NEXT:    [[TMP2:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"(ptr [[TMP0]], [10 x [20 x %struct.S]] undef), "QUAL.OSS.COPY"(ptr [[TMP0]], ptr @oss_copy_ctor_ZN1SC1ERS_i), "QUAL.OSS.DEINIT"(ptr [[TMP0]], ptr @oss_dtor_ZN1SD1Ev), "QUAL.OSS.FIRSTPRIVATE"(ptr [[TMP1]], [10 x [20 x %struct.S]] undef), "QUAL.OSS.COPY"(ptr [[TMP1]], ptr @oss_copy_ctor_ZN1SC1ERS_i), "QUAL.OSS.DEINIT"(ptr [[TMP1]], ptr @oss_dtor_ZN1SD1Ev), "QUAL.OSS.FIRSTPRIVATE"(ptr [[S]], [10 x [20 x %struct.S]] undef), "QUAL.OSS.COPY"(ptr [[S]], ptr @oss_copy_ctor_ZN1SC1ERS_i), "QUAL.OSS.DEINIT"(ptr [[S]], ptr @oss_dtor_ZN1SD1Ev), "QUAL.OSS.FIRSTPRIVATE"(ptr [[S1]], [10 x [20 x %struct.S]] undef), "QUAL.OSS.COPY"(ptr [[S1]], ptr @oss_copy_ctor_ZN1SC1ERS_i), "QUAL.OSS.DEINIT"(ptr [[S1]], ptr @oss_dtor_ZN1SD1Ev) ], !dbg [[DBG13]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP2]]), !dbg [[DBG14:![0-9]+]]
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[RS]], align 8, !dbg [[DBG15:![0-9]+]]
// CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[RS1]], align 8, !dbg [[DBG15]]
// CHECK-NEXT:    [[TMP5:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.PRIVATE"(ptr [[TMP3]], [10 x [20 x %struct.S]] undef), "QUAL.OSS.INIT"(ptr [[TMP3]], ptr @oss_ctor_ZN1SC1Ev), "QUAL.OSS.DEINIT"(ptr [[TMP3]], ptr @oss_dtor_ZN1SD1Ev), "QUAL.OSS.PRIVATE"(ptr [[TMP4]], [10 x [20 x %struct.S]] undef), "QUAL.OSS.INIT"(ptr [[TMP4]], ptr @oss_ctor_ZN1SC1Ev), "QUAL.OSS.DEINIT"(ptr [[TMP4]], ptr @oss_dtor_ZN1SD1Ev), "QUAL.OSS.PRIVATE"(ptr [[S]], [10 x [20 x %struct.S]] undef), "QUAL.OSS.INIT"(ptr [[S]], ptr @oss_ctor_ZN1SC1Ev), "QUAL.OSS.DEINIT"(ptr [[S]], ptr @oss_dtor_ZN1SD1Ev), "QUAL.OSS.PRIVATE"(ptr [[S1]], [10 x [20 x %struct.S]] undef), "QUAL.OSS.INIT"(ptr [[S1]], ptr @oss_ctor_ZN1SC1Ev), "QUAL.OSS.DEINIT"(ptr [[S1]], ptr @oss_dtor_ZN1SD1Ev) ], !dbg [[DBG15]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP5]]), !dbg [[DBG16:![0-9]+]]
// CHECK-NEXT:    [[ARRAY_BEGIN8:%.*]] = getelementptr inbounds [10 x [20 x %struct.S]], ptr [[S1]], i32 0, i32 0, i32 0, !dbg [[DBG17:![0-9]+]]
// CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAY_BEGIN8]], i64 200, !dbg [[DBG17]]
// CHECK-NEXT:    br label [[ARRAYDESTROY_BODY:%.*]], !dbg [[DBG17]]
// CHECK:       arraydestroy.body:
// CHECK-NEXT:    [[ARRAYDESTROY_ELEMENTPAST:%.*]] = phi ptr [ [[TMP6]], [[ARRAYCTOR_CONT7]] ], [ [[ARRAYDESTROY_ELEMENT:%.*]], [[ARRAYDESTROY_BODY]] ], !dbg [[DBG17]]
// CHECK-NEXT:    [[ARRAYDESTROY_ELEMENT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYDESTROY_ELEMENTPAST]], i64 -1, !dbg [[DBG17]]
// CHECK-NEXT:    call void @_ZN1SD1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[ARRAYDESTROY_ELEMENT]]) #[[ATTR2:[0-9]+]], !dbg [[DBG17]]
// CHECK-NEXT:    [[ARRAYDESTROY_DONE:%.*]] = icmp eq ptr [[ARRAYDESTROY_ELEMENT]], [[ARRAY_BEGIN8]], !dbg [[DBG17]]
// CHECK-NEXT:    br i1 [[ARRAYDESTROY_DONE]], label [[ARRAYDESTROY_DONE9:%.*]], label [[ARRAYDESTROY_BODY]], !dbg [[DBG17]]
// CHECK:       arraydestroy.done9:
// CHECK-NEXT:    [[ARRAY_BEGIN10:%.*]] = getelementptr inbounds [10 x [20 x %struct.S]], ptr [[S]], i32 0, i32 0, i32 0, !dbg [[DBG17]]
// CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAY_BEGIN10]], i64 200, !dbg [[DBG17]]
// CHECK-NEXT:    br label [[ARRAYDESTROY_BODY11:%.*]], !dbg [[DBG17]]
// CHECK:       arraydestroy.body11:
// CHECK-NEXT:    [[ARRAYDESTROY_ELEMENTPAST12:%.*]] = phi ptr [ [[TMP7]], [[ARRAYDESTROY_DONE9]] ], [ [[ARRAYDESTROY_ELEMENT13:%.*]], [[ARRAYDESTROY_BODY11]] ], !dbg [[DBG17]]
// CHECK-NEXT:    [[ARRAYDESTROY_ELEMENT13]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYDESTROY_ELEMENTPAST12]], i64 -1, !dbg [[DBG17]]
// CHECK-NEXT:    call void @_ZN1SD1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[ARRAYDESTROY_ELEMENT13]]) #[[ATTR2]], !dbg [[DBG17]]
// CHECK-NEXT:    [[ARRAYDESTROY_DONE14:%.*]] = icmp eq ptr [[ARRAYDESTROY_ELEMENT13]], [[ARRAY_BEGIN10]], !dbg [[DBG17]]
// CHECK-NEXT:    br i1 [[ARRAYDESTROY_DONE14]], label [[ARRAYDESTROY_DONE15:%.*]], label [[ARRAYDESTROY_BODY11]], !dbg [[DBG17]]
// CHECK:       arraydestroy.done15:
// CHECK-NEXT:    ret void, !dbg [[DBG17]]
//
//
// CHECK-LABEL: @oss_copy_ctor_ZN1SC1ERS_i(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTADDR2:%.*]] = alloca i64, align 8
// CHECK-NEXT:    store ptr [[TMP0:%.*]], ptr [[DOTADDR]], align 8
// CHECK-NEXT:    store ptr [[TMP1:%.*]], ptr [[DOTADDR1]], align 8
// CHECK-NEXT:    store i64 [[TMP2:%.*]], ptr [[DOTADDR2]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR]], align 8, !dbg [[DBG19:![0-9]+]]
// CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[DOTADDR1]], align 8, !dbg [[DBG19]]
// CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[DOTADDR2]], align 8, !dbg [[DBG19]]
// CHECK-NEXT:    [[ARRAYCTOR_DST_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[TMP4]], i64 [[TMP5]], !dbg [[DBG19]]
// CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]], !dbg [[DBG19]]
// CHECK:       arrayctor.loop:
// CHECK-NEXT:    [[ARRAYCTOR_DST_CUR:%.*]] = phi ptr [ [[TMP4]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_DST_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG19]]
// CHECK-NEXT:    [[ARRAYCTOR_SRC_CUR:%.*]] = phi ptr [ [[TMP3]], [[ENTRY]] ], [ [[ARRAYCTOR_SRC_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG19]]
// CHECK-NEXT:    call void @_ZN1SC1ERS_i(ptr noundef nonnull align 4 dereferenceable(4) [[ARRAYCTOR_DST_CUR]], ptr noundef nonnull align 4 dereferenceable(4) [[ARRAYCTOR_SRC_CUR]], i32 noundef 0), !dbg [[DBG20:![0-9]+]]
// CHECK-NEXT:    [[ARRAYCTOR_DST_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_DST_CUR]], i64 1, !dbg [[DBG19]]
// CHECK-NEXT:    [[ARRAYCTOR_SRC_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_SRC_CUR]], i64 1, !dbg [[DBG19]]
// CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_DST_NEXT]], [[ARRAYCTOR_DST_END]], !dbg [[DBG19]]
// CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]], !dbg [[DBG19]]
// CHECK:       arrayctor.cont:
// CHECK-NEXT:    ret void, !dbg [[DBG20]]
//
//
// CHECK-LABEL: @oss_dtor_ZN1SD1Ev(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca i64, align 8
// CHECK-NEXT:    store ptr [[TMP0:%.*]], ptr [[DOTADDR]], align 8
// CHECK-NEXT:    store i64 [[TMP1:%.*]], ptr [[DOTADDR1]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DOTADDR]], align 8, !dbg [[DBG23:![0-9]+]]
// CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[DOTADDR1]], align 8, !dbg [[DBG23]]
// CHECK-NEXT:    [[ARRAYDTOR_DST_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[TMP2]], i64 [[TMP3]], !dbg [[DBG23]]
// CHECK-NEXT:    br label [[ARRAYDTOR_LOOP:%.*]], !dbg [[DBG23]]
// CHECK:       arraydtor.loop:
// CHECK-NEXT:    [[ARRAYDTOR_DST_CUR:%.*]] = phi ptr [ [[TMP2]], [[ENTRY:%.*]] ], [ [[ARRAYDTOR_DST_NEXT:%.*]], [[ARRAYDTOR_LOOP]] ], !dbg [[DBG23]]
// CHECK-NEXT:    call void @_ZN1SD1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[ARRAYDTOR_DST_CUR]]) #[[ATTR2]], !dbg [[DBG23]]
// CHECK-NEXT:    [[ARRAYDTOR_DST_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYDTOR_DST_CUR]], i64 1, !dbg [[DBG23]]
// CHECK-NEXT:    [[ARRAYDTOR_DONE:%.*]] = icmp eq ptr [[ARRAYDTOR_DST_NEXT]], [[ARRAYDTOR_DST_END]], !dbg [[DBG23]]
// CHECK-NEXT:    br i1 [[ARRAYDTOR_DONE]], label [[ARRAYDTOR_CONT:%.*]], label [[ARRAYDTOR_LOOP]], !dbg [[DBG23]]
// CHECK:       arraydtor.cont:
// CHECK-NEXT:    ret void, !dbg [[DBG23]]
//
//
// CHECK-LABEL: @oss_ctor_ZN1SC1Ev(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca i64, align 8
// CHECK-NEXT:    store ptr [[TMP0:%.*]], ptr [[DOTADDR]], align 8
// CHECK-NEXT:    store i64 [[TMP1:%.*]], ptr [[DOTADDR1]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DOTADDR]], align 8, !dbg [[DBG25:![0-9]+]]
// CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[DOTADDR1]], align 8, !dbg [[DBG25]]
// CHECK-NEXT:    [[ARRAYCTOR_DST_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[TMP2]], i64 [[TMP3]], !dbg [[DBG25]]
// CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]], !dbg [[DBG25]]
// CHECK:       arrayctor.loop:
// CHECK-NEXT:    [[ARRAYCTOR_DST_CUR:%.*]] = phi ptr [ [[TMP2]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_DST_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG25]]
// CHECK-NEXT:    call void @_ZN1SC1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[ARRAYCTOR_DST_CUR]]), !dbg [[DBG26:![0-9]+]]
// CHECK-NEXT:    [[ARRAYCTOR_DST_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_DST_CUR]], i64 1, !dbg [[DBG25]]
// CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_DST_NEXT]], [[ARRAYCTOR_DST_END]], !dbg [[DBG25]]
// CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]], !dbg [[DBG25]]
// CHECK:       arrayctor.cont:
// CHECK-NEXT:    ret void, !dbg [[DBG26]]
//
//
// CHECK-LABEL: @main(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[X:%.*]] = alloca [[STRUCT_S:%.*]], align 4
// CHECK-NEXT:    [[RX:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[X1:%.*]] = alloca [[STRUCT_S]], align 4
// CHECK-NEXT:    [[RX1:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store i32 0, ptr [[RETVAL]], align 4
// CHECK-NEXT:    call void @_ZN1SC1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[X]]), !dbg [[DBG29:![0-9]+]]
// CHECK-NEXT:    store ptr [[X]], ptr [[RX]], align 8, !dbg [[DBG30:![0-9]+]]
// CHECK-NEXT:    call void @_ZN1SC1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[X1]]), !dbg [[DBG31:![0-9]+]]
// CHECK-NEXT:    store ptr [[X1]], ptr [[RX1]], align 8, !dbg [[DBG32:![0-9]+]]
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[RX]], align 8, !dbg [[DBG33:![0-9]+]]
// CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[RX1]], align 8, !dbg [[DBG33]]
// CHECK-NEXT:    [[TMP2:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"(ptr [[TMP0]], [[STRUCT_S]] undef), "QUAL.OSS.COPY"(ptr [[TMP0]], ptr @oss_copy_ctor_ZN1SC1ERS_i), "QUAL.OSS.DEINIT"(ptr [[TMP0]], ptr @oss_dtor_ZN1SD1Ev), "QUAL.OSS.FIRSTPRIVATE"(ptr [[TMP1]], [[STRUCT_S]] undef), "QUAL.OSS.COPY"(ptr [[TMP1]], ptr @oss_copy_ctor_ZN1SC1ERS_i), "QUAL.OSS.DEINIT"(ptr [[TMP1]], ptr @oss_dtor_ZN1SD1Ev), "QUAL.OSS.FIRSTPRIVATE"(ptr [[X]], [[STRUCT_S]] undef), "QUAL.OSS.COPY"(ptr [[X]], ptr @oss_copy_ctor_ZN1SC1ERS_i), "QUAL.OSS.DEINIT"(ptr [[X]], ptr @oss_dtor_ZN1SD1Ev), "QUAL.OSS.FIRSTPRIVATE"(ptr [[X1]], [[STRUCT_S]] undef), "QUAL.OSS.COPY"(ptr [[X1]], ptr @oss_copy_ctor_ZN1SC1ERS_i), "QUAL.OSS.DEINIT"(ptr [[X1]], ptr @oss_dtor_ZN1SD1Ev) ], !dbg [[DBG33]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP2]]), !dbg [[DBG34:![0-9]+]]
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[RX]], align 8, !dbg [[DBG35:![0-9]+]]
// CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[RX1]], align 8, !dbg [[DBG35]]
// CHECK-NEXT:    [[TMP5:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.PRIVATE"(ptr [[TMP3]], [[STRUCT_S]] undef), "QUAL.OSS.INIT"(ptr [[TMP3]], ptr @oss_ctor_ZN1SC1Ev), "QUAL.OSS.DEINIT"(ptr [[TMP3]], ptr @oss_dtor_ZN1SD1Ev), "QUAL.OSS.PRIVATE"(ptr [[TMP4]], [[STRUCT_S]] undef), "QUAL.OSS.INIT"(ptr [[TMP4]], ptr @oss_ctor_ZN1SC1Ev), "QUAL.OSS.DEINIT"(ptr [[TMP4]], ptr @oss_dtor_ZN1SD1Ev), "QUAL.OSS.PRIVATE"(ptr [[X]], [[STRUCT_S]] undef), "QUAL.OSS.INIT"(ptr [[X]], ptr @oss_ctor_ZN1SC1Ev), "QUAL.OSS.DEINIT"(ptr [[X]], ptr @oss_dtor_ZN1SD1Ev), "QUAL.OSS.PRIVATE"(ptr [[X1]], [[STRUCT_S]] undef), "QUAL.OSS.INIT"(ptr [[X1]], ptr @oss_ctor_ZN1SC1Ev), "QUAL.OSS.DEINIT"(ptr [[X1]], ptr @oss_dtor_ZN1SD1Ev) ], !dbg [[DBG35]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP5]]), !dbg [[DBG36:![0-9]+]]
// CHECK-NEXT:    store i32 0, ptr [[RETVAL]], align 4, !dbg [[DBG37:![0-9]+]]
// CHECK-NEXT:    call void @_ZN1SD1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[X1]]) #[[ATTR2]], !dbg [[DBG38:![0-9]+]]
// CHECK-NEXT:    call void @_ZN1SD1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[X]]) #[[ATTR2]], !dbg [[DBG38]]
// CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr [[RETVAL]], align 4, !dbg [[DBG38]]
// CHECK-NEXT:    ret i32 [[TMP6]], !dbg [[DBG38]]
//
//
// CHECK-LABEL: @__cxx_global_var_init(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    call void @_ZN1SC1Ev(ptr noundef nonnull align 4 dereferenceable(4) @s), !dbg [[DBG40:![0-9]+]]
// CHECK-NEXT:    [[TMP0:%.*]] = call i32 @__cxa_atexit(ptr @_ZN1SD1Ev, ptr @s, ptr @__dso_handle) #[[ATTR2]], !dbg [[DBG42:![0-9]+]]
// CHECK-NEXT:    ret void, !dbg [[DBG40]]
//
//
// CHECK-LABEL: @_Z10global_refv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr @res, align 8, !dbg [[DBG44:![0-9]+]]
// CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr @rs, align 8, !dbg [[DBG44]]
// CHECK-NEXT:    [[TMP2:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"(ptr [[TMP0]], [[STRUCT_S:%.*]] undef), "QUAL.OSS.SHARED"(ptr [[TMP1]], [[STRUCT_S]] undef), "QUAL.OSS.DEP.IN"(ptr [[TMP0]], [6 x i8] c"res.x\00", ptr @compute_dep, ptr [[TMP0]]), "QUAL.OSS.DEP.IN"(ptr [[TMP1]], [5 x i8] c"rs.x\00", ptr @compute_dep.1, ptr [[TMP1]]) ], !dbg [[DBG44]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP2]]), !dbg [[DBG45:![0-9]+]]
// CHECK-NEXT:    ret void, !dbg [[DBG46:![0-9]+]]
//
//
// CHECK-LABEL: @compute_dep(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T:%.*]], align 8
// CHECK-NEXT:    [[RES_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[RES:%.*]], ptr [[RES_ADDR]], align 8
// CHECK-NEXT:    [[X:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[RES]], i32 0, i32 0
// CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 0
// CHECK-NEXT:    store ptr [[X]], ptr [[TMP0]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 1
// CHECK-NEXT:    store i64 4, ptr [[TMP1]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 2
// CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 3
// CHECK-NEXT:    store i64 4, ptr [[TMP3]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], align 8, !dbg [[DBG48:![0-9]+]]
// CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T]] [[TMP4]], !dbg [[DBG48]]
//
//
// CHECK-LABEL: @compute_dep.1(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_0:%.*]], align 8
// CHECK-NEXT:    [[RS_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[RS:%.*]], ptr [[RS_ADDR]], align 8
// CHECK-NEXT:    [[X:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[RS]], i32 0, i32 0
// CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 0
// CHECK-NEXT:    store ptr [[X]], ptr [[TMP0]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 1
// CHECK-NEXT:    store i64 4, ptr [[TMP1]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 2
// CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 3
// CHECK-NEXT:    store i64 4, ptr [[TMP3]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], align 8, !dbg [[DBG51:![0-9]+]]
// CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP4]], !dbg [[DBG51]]
//
//
// CHECK-LABEL: @_GLOBAL__sub_I_task_non_pod.cpp(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    call void @__cxx_global_var_init(), !dbg [[DBG54:![0-9]+]]
// CHECK-NEXT:    ret void
//
