// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
// RUN: %clang_cc1 -verify -fompss-2 -disable-llvm-passes -ferror-limit 100 %s -S -emit-llvm -o - | FileCheck %s
// expected-no-diagnostics
template<typename T> T foo() { return T(); }

#pragma oss task priority(foo<int>())
void foo1() {}
#pragma oss task priority(n)
void foo2(int n) {}

void bar(int n) {
    int vla[n];
    #pragma oss task priority(foo<int>())
    {}
    #pragma oss task priority(n)
    {}
    #pragma oss task priority(vla[1])
    {}
    foo1();
    foo2(n);
}








// CHECK-LABEL: define {{[^@]+}}@_Z4foo1v
// CHECK-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret void, !dbg [[DBG9:![0-9]+]]
//
//
// CHECK-LABEL: define {{[^@]+}}@_Z4foo2i
// CHECK-SAME: (i32 noundef [[N:%.*]]) #[[ATTR0]] !dbg [[DBG10:![0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[N_ADDR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    store i32 [[N]], ptr [[N_ADDR]], align 4
// CHECK-NEXT:    ret void, !dbg [[DBG11:![0-9]+]]
//
//
// CHECK-LABEL: define {{[^@]+}}@_Z3bari
// CHECK-SAME: (i32 noundef [[N:%.*]]) #[[ATTR0]] !dbg [[DBG12:![0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[N_ADDR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[SAVED_STACK:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[__VLA_EXPR0:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[CALL_ARG:%.*]] = alloca i32, align 4
// CHECK-NEXT:    store i32 [[N]], ptr [[N_ADDR]], align 4
// CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[N_ADDR]], align 4, !dbg [[DBG13:![0-9]+]]
// CHECK-NEXT:    [[TMP1:%.*]] = zext i32 [[TMP0]] to i64, !dbg [[DBG14:![0-9]+]]
// CHECK-NEXT:    [[TMP2:%.*]] = call ptr @llvm.stacksave(), !dbg [[DBG14]]
// CHECK-NEXT:    store ptr [[TMP2]], ptr [[SAVED_STACK]], align 8, !dbg [[DBG14]]
// CHECK-NEXT:    [[VLA:%.*]] = alloca i32, i64 [[TMP1]], align 16, !dbg [[DBG14]]
// CHECK-NEXT:    store i64 [[TMP1]], ptr [[__VLA_EXPR0]], align 8, !dbg [[DBG14]]
// CHECK-NEXT:    [[TMP3:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.PRIORITY"(ptr @compute_priority) ], !dbg [[DBG15:![0-9]+]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP3]]), !dbg [[DBG16:![0-9]+]]
// CHECK-NEXT:    [[TMP4:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"(ptr [[N_ADDR]], i32 undef), "QUAL.OSS.PRIORITY"(ptr @compute_priority.1, ptr [[N_ADDR]]) ], !dbg [[DBG17:![0-9]+]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP4]]), !dbg [[DBG18:![0-9]+]]
// CHECK-NEXT:    [[TMP5:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"(ptr [[VLA]], i32 undef), "QUAL.OSS.VLA.DIMS"(ptr [[VLA]], i64 [[TMP1]]), "QUAL.OSS.PRIORITY"(ptr @compute_priority.2, ptr [[VLA]], i64 [[TMP1]]), "QUAL.OSS.CAPTURED"(i64 [[TMP1]]) ], !dbg [[DBG19:![0-9]+]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP5]]), !dbg [[DBG20:![0-9]+]]
// CHECK-NEXT:    [[TMP6:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.PRIORITY"(ptr @compute_priority.3), "QUAL.OSS.DECL.SOURCE"([9 x i8] c"foo1:6:9\00") ], !dbg [[DBG21:![0-9]+]]
// CHECK-NEXT:    call void @_Z4foo1v(), !dbg [[DBG21]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP6]]), !dbg [[DBG21]]
// CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[N_ADDR]], align 4, !dbg [[DBG22:![0-9]+]]
// CHECK-NEXT:    store i32 [[TMP7]], ptr [[CALL_ARG]], align 4, !dbg [[DBG22]]
// CHECK-NEXT:    [[TMP8:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"(ptr [[CALL_ARG]], i32 undef), "QUAL.OSS.PRIORITY"(ptr @compute_priority.4, ptr [[CALL_ARG]]), "QUAL.OSS.DECL.SOURCE"([9 x i8] c"foo2:8:9\00") ], !dbg [[DBG23:![0-9]+]]
// CHECK-NEXT:    [[TMP9:%.*]] = load i32, ptr [[CALL_ARG]], align 4, !dbg [[DBG22]]
// CHECK-NEXT:    call void @_Z4foo2i(i32 noundef [[TMP9]]), !dbg [[DBG23]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP8]]), !dbg [[DBG23]]
// CHECK-NEXT:    [[TMP10:%.*]] = load ptr, ptr [[SAVED_STACK]], align 8, !dbg [[DBG24:![0-9]+]]
// CHECK-NEXT:    call void @llvm.stackrestore(ptr [[TMP10]]), !dbg [[DBG24]]
// CHECK-NEXT:    ret void, !dbg [[DBG24]]
//
//
// CHECK-LABEL: define {{[^@]+}}@compute_priority
// CHECK-SAME: () #[[ATTR3:[0-9]+]] !dbg [[DBG25:![0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @_Z3fooIiET_v(), !dbg [[DBG26:![0-9]+]]
// CHECK-NEXT:    ret i32 [[CALL]], !dbg [[DBG26]]
//
//
// CHECK-LABEL: define {{[^@]+}}@_Z3fooIiET_v
// CHECK-SAME: () #[[ATTR0]] comdat !dbg [[DBG28:![0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret i32 0, !dbg [[DBG29:![0-9]+]]
//
//
// CHECK-LABEL: define {{[^@]+}}@compute_priority.1
// CHECK-SAME: (ptr [[N:%.*]]) #[[ATTR3]] !dbg [[DBG30:![0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[N_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[N]], ptr [[N_ADDR]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[N]], align 4, !dbg [[DBG31:![0-9]+]]
// CHECK-NEXT:    ret i32 [[TMP0]], !dbg [[DBG31]]
//
//
// CHECK-LABEL: define {{[^@]+}}@compute_priority.2
// CHECK-SAME: (ptr [[VLA:%.*]], i64 [[TMP0:%.*]]) #[[ATTR3]] !dbg [[DBG33:![0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[VLA_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTADDR:%.*]] = alloca i64, align 8
// CHECK-NEXT:    store ptr [[VLA]], ptr [[VLA_ADDR]], align 8
// CHECK-NEXT:    store i64 [[TMP0]], ptr [[DOTADDR]], align 8
// CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[VLA]], i64 1, !dbg [[DBG34:![0-9]+]]
// CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ARRAYIDX]], align 4, !dbg [[DBG34]]
// CHECK-NEXT:    ret i32 [[TMP1]], !dbg [[DBG36:![0-9]+]]
//
//
// CHECK-LABEL: define {{[^@]+}}@compute_priority.3
// CHECK-SAME: () #[[ATTR3]] !dbg [[DBG37:![0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @_Z3fooIiET_v(), !dbg [[DBG38:![0-9]+]]
// CHECK-NEXT:    ret i32 [[CALL]], !dbg [[DBG38]]
//
//
// CHECK-LABEL: define {{[^@]+}}@compute_priority.4
// CHECK-SAME: (ptr [[N:%.*]]) #[[ATTR3]] !dbg [[DBG40:![0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[N_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[N]], ptr [[N_ADDR]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[N]], align 4, !dbg [[DBG41:![0-9]+]]
// CHECK-NEXT:    ret i32 [[TMP0]], !dbg [[DBG41]]
//
