; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -ompss-2 -S | FileCheck %s
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
source_filename = "simple_task_with_taskwait.ll"

define void @foo(i32 %x, i32 %y) {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[X_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[Y_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[X_ORIG:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[Y_ORIG:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[Z_ORIG:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[Z:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 [[X:%.*]], i32* [[X_ADDR]], align 4
; CHECK-NEXT:    store i32 [[Y:%.*]], i32* [[Y_ADDR]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, i32* [[X_ADDR]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], i32* [[X_ORIG]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, i32* [[Y_ADDR]], align 4
; CHECK-NEXT:    store i32 [[TMP1]], i32* [[Y_ORIG]], align 4
; CHECK-NEXT:    store i32 42, i32* [[Z_ORIG]], align 4
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, i32* [[Z_ORIG]], align 4
; CHECK-NEXT:    store i32 [[TMP2]], i32* [[Z]], align 4
; CHECK-NEXT:    br label [[CODEREPL:%.*]]
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP3:%.*]] = alloca %nanos6_task_args_foo0*
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast %nanos6_task_args_foo0** [[TMP3]] to i8**
; CHECK-NEXT:    [[TMP5:%.*]] = alloca i8*
; CHECK-NEXT:    call void @nanos6_create_task(%nanos6_task_info_t* @task_info_var_foo0, %nanos6_task_invocation_info_t* @task_invocation_info_foo0, i64 16, i8** [[TMP4]], i8** [[TMP5]], i64 0, i64 0)
; CHECK-NEXT:    [[TMP6:%.*]] = load %nanos6_task_args_foo0*, %nanos6_task_args_foo0** [[TMP3]]
; CHECK-NEXT:    [[GEP_X_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO0:%.*]], %nanos6_task_args_foo0* [[TMP6]], i32 0, i32 0
; CHECK-NEXT:    store i32* [[X_ADDR]], i32** [[GEP_X_ADDR]]
; CHECK-NEXT:    [[GEP_Y_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO0]], %nanos6_task_args_foo0* [[TMP6]], i32 0, i32 2
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, i32* [[Y_ADDR]]
; CHECK-NEXT:    store i32 [[TMP7]], i32* [[GEP_Y_ADDR]]
; CHECK-NEXT:    [[TMP8:%.*]] = load i8*, i8** [[TMP5]]
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP8]])
; CHECK-NEXT:    br label [[TMP9:%.*]]
; CHECK:         call void @nanos6_taskwait(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @0, i32 0, i32 0))
; CHECK-NEXT:    ret void
;
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %x_orig = alloca i32, align 4
  %y_orig = alloca i32, align 4
  %z_orig = alloca i32, align 4
  %z = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  store i32 %0, i32* %x_orig, align 4
  %1 = load i32, i32* %y.addr, align 4
  store i32 %1, i32* %y_orig, align 4
  store i32 42, i32* %z_orig, align 4
  %2 = load i32, i32* %z_orig, align 4
  store i32 %2, i32* %z, align 4

  %3 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"(i32* %x.addr), "QUAL.OSS.PRIVATE"(i32* %z), "QUAL.OSS.FIRSTPRIVATE"(i32* %y.addr) ], !dbg !8
  %4 = load i32, i32* %x.addr, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %x.addr, align 4
  %5 = load i32, i32* %y.addr, align 4
  %inc1 = add nsw i32 %5, 1
  store i32 %inc1, i32* %y.addr, align 4
  %6 = load i32, i32* %z, align 4
  %inc2 = add nsw i32 %6, 1
  store i32 %inc2, i32* %z, align 4
  call void @llvm.directive.region.exit(token %3), !dbg !9

  %7 = call i1 @llvm.directive.marker() [ "DIR.OSS"([9 x i8] c"TASKWAIT\00") ], !dbg !10
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
declare i1 @llvm.directive.marker()

!llvm.module.flags = !{!3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "human", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, enums: !2, nameTableKind: None)
!1 = !DIFile(filename: "simple_task_with_taskwait.c", directory: "")!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!6 = distinct !DISubprogram(name: "foo", scope: !1, file: !1, line: 4, type: !7, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!7 = !DISubroutineType(types: !2)
!8 = !DILocation(line: 5, column: 9, scope: !6)
!9 = !DILocation(line: 5, column: 9, scope: !6)
!10 = !DILocation(line: 5, column: 9, scope: !6)
