; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -ompss-2 -S | FileCheck %s
; ModuleID = 'task_array.ll'
source_filename = "task_array.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.S = type { i32 }

define dso_local void @_Z9pod_arrayv() !dbg !6 {
; CHECK-LABEL: @_Z9pod_arrayv(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ARRAY:%.*]] = alloca [10 x i32], align 16
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg !8
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca %nanos6_task_args__Z9pod_arrayv0*, align 8, !dbg !8
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast %nanos6_task_args__Z9pod_arrayv0** [[TMP0]] to i8**, !dbg !8
; CHECK-NEXT:    [[TMP2:%.*]] = alloca i8*, align 8, !dbg !8
; CHECK-NEXT:    call void @nanos6_create_task(%nanos6_task_info_t* @task_info_var__Z9pod_arrayv0, %nanos6_task_invocation_info_t* @task_invocation_info__Z9pod_arrayv0, i64 48, i8** [[TMP1]], i8** [[TMP2]], i64 0, i64 0), !dbg !8
; CHECK-NEXT:    [[TMP3:%.*]] = load %nanos6_task_args__Z9pod_arrayv0*, %nanos6_task_args__Z9pod_arrayv0** [[TMP0]], align 8, !dbg !8
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast %nanos6_task_args__Z9pod_arrayv0* [[TMP3]] to i8*, !dbg !8
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, i8* [[TMP4]], i64 48, !dbg !8
; CHECK-NEXT:    [[TMP5:%.*]] = load i8*, i8** [[TMP2]], align 8, !dbg !8
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP5]]), !dbg !8
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg !8
; CHECK:       final.end:
; CHECK-NEXT:    br label [[FINAL_COND2:%.*]], !dbg !9
; CHECK:       codeRepl4:
; CHECK-NEXT:    [[TMP6:%.*]] = alloca %nanos6_task_args__Z9pod_arrayv1*, align 8, !dbg !9
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast %nanos6_task_args__Z9pod_arrayv1** [[TMP6]] to i8**, !dbg !9
; CHECK-NEXT:    [[TMP8:%.*]] = alloca i8*, align 8, !dbg !9
; CHECK-NEXT:    call void @nanos6_create_task(%nanos6_task_info_t* @task_info_var__Z9pod_arrayv1, %nanos6_task_invocation_info_t* @task_invocation_info__Z9pod_arrayv1, i64 48, i8** [[TMP7]], i8** [[TMP8]], i64 0, i64 0), !dbg !9
; CHECK-NEXT:    [[TMP9:%.*]] = load %nanos6_task_args__Z9pod_arrayv1*, %nanos6_task_args__Z9pod_arrayv1** [[TMP6]], align 8, !dbg !9
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast %nanos6_task_args__Z9pod_arrayv1* [[TMP9]] to i8*, !dbg !9
; CHECK-NEXT:    [[ARGS_END5:%.*]] = getelementptr i8, i8* [[TMP10]], i64 48, !dbg !9
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYV1:%.*]], %nanos6_task_args__Z9pod_arrayv1* [[TMP9]], i32 0, i32 0, !dbg !9
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast [10 x i32]* [[GEP_ARRAY]] to i8*, !dbg !9
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast [10 x i32]* [[ARRAY]] to i8*, !dbg !9
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP11]], i8* align 4 [[TMP12]], i64 40, i1 false), !dbg !9
; CHECK-NEXT:    [[TMP13:%.*]] = load i8*, i8** [[TMP8]], align 8, !dbg !9
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP13]]), !dbg !9
; CHECK-NEXT:    br label [[FINAL_END1:%.*]], !dbg !9
; CHECK:       final.end1:
; CHECK-NEXT:    ret void, !dbg !10
; CHECK:       final.then:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg !9
; CHECK:       final.then3:
; CHECK-NEXT:    br label [[FINAL_END1]], !dbg !10
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP14:%.*]] = call i32 @nanos6_in_final(), !dbg !8
; CHECK-NEXT:    [[TMP15:%.*]] = icmp ne i32 [[TMP14]], 0, !dbg !8
; CHECK-NEXT:    br i1 [[TMP15]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg !8
; CHECK:       final.cond2:
; CHECK-NEXT:    [[TMP16:%.*]] = call i32 @nanos6_in_final(), !dbg !9
; CHECK-NEXT:    [[TMP17:%.*]] = icmp ne i32 [[TMP16]], 0, !dbg !9
; CHECK-NEXT:    br i1 [[TMP17]], label [[FINAL_THEN3:%.*]], label [[CODEREPL4:%.*]], !dbg !9
;
entry:
  %array = alloca [10 x i32], align 16
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.PRIVATE"([10 x i32]* %array) ], !dbg !8
  call void @llvm.directive.region.exit(token %0), !dbg !9
  %1 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"([10 x i32]* %array) ], !dbg !10
  call void @llvm.directive.region.exit(token %1), !dbg !11
  ret void, !dbg !12

}


define dso_local void @_Z13non_pod_arrayv() !dbg !13 {
; CHECK-LABEL: @_Z13non_pod_arrayv(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ARRAY:%.*]] = alloca [10 x %struct.S], align 16
; CHECK-NEXT:    [[ARRAY_BEGIN:%.*]] = getelementptr inbounds [10 x %struct.S], [10 x %struct.S]* [[ARRAY]], i32 0, i32 0, !dbg !12
; CHECK-NEXT:    [[ARRAYCTOR_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], %struct.S* [[ARRAY_BEGIN]], i64 10, !dbg !12
; CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]], !dbg !12
; CHECK:       arrayctor.loop:
; CHECK-NEXT:    [[ARRAYCTOR_CUR:%.*]] = phi %struct.S* [ [[ARRAY_BEGIN]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg !12
; CHECK-NEXT:    call void @_ZN1SC1Ev(%struct.S* [[ARRAYCTOR_CUR]]), !dbg !12
; CHECK-NEXT:    [[ARRAYCTOR_NEXT]] = getelementptr inbounds [[STRUCT_S]], %struct.S* [[ARRAYCTOR_CUR]], i64 1, !dbg !12
; CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq %struct.S* [[ARRAYCTOR_NEXT]], [[ARRAYCTOR_END]], !dbg !12
; CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]], !dbg !12
; CHECK:       arrayctor.cont:
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg !13
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca %nanos6_task_args__Z13non_pod_arrayv0*, align 8, !dbg !13
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast %nanos6_task_args__Z13non_pod_arrayv0** [[TMP0]] to i8**, !dbg !13
; CHECK-NEXT:    [[TMP2:%.*]] = alloca i8*, align 8, !dbg !13
; CHECK-NEXT:    call void @nanos6_create_task(%nanos6_task_info_t* @task_info_var__Z13non_pod_arrayv0, %nanos6_task_invocation_info_t* @task_invocation_info__Z13non_pod_arrayv0, i64 48, i8** [[TMP1]], i8** [[TMP2]], i64 0, i64 0), !dbg !13
; CHECK-NEXT:    [[TMP3:%.*]] = load %nanos6_task_args__Z13non_pod_arrayv0*, %nanos6_task_args__Z13non_pod_arrayv0** [[TMP0]], align 8, !dbg !13
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast %nanos6_task_args__Z13non_pod_arrayv0* [[TMP3]] to i8*, !dbg !13
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, i8* [[TMP4]], i64 48, !dbg !13
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYV0:%.*]], %nanos6_task_args__Z13non_pod_arrayv0* [[TMP3]], i32 0, i32 0, !dbg !13
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast [10 x %struct.S]* [[GEP_ARRAY]] to %struct.S*, !dbg !13
; CHECK-NEXT:    call void @oss_ctor_ZN1SC1Ev(%struct.S* [[TMP5]], i64 10), !dbg !13
; CHECK-NEXT:    [[TMP6:%.*]] = load i8*, i8** [[TMP2]], align 8, !dbg !13
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP6]]), !dbg !13
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg !13
; CHECK:       final.end:
; CHECK-NEXT:    br label [[FINAL_COND2:%.*]], !dbg !14
; CHECK:       codeRepl4:
; CHECK-NEXT:    [[TMP7:%.*]] = alloca %nanos6_task_args__Z13non_pod_arrayv1*, align 8, !dbg !14
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast %nanos6_task_args__Z13non_pod_arrayv1** [[TMP7]] to i8**, !dbg !14
; CHECK-NEXT:    [[TMP9:%.*]] = alloca i8*, align 8, !dbg !14
; CHECK-NEXT:    call void @nanos6_create_task(%nanos6_task_info_t* @task_info_var__Z13non_pod_arrayv1, %nanos6_task_invocation_info_t* @task_invocation_info__Z13non_pod_arrayv1, i64 48, i8** [[TMP8]], i8** [[TMP9]], i64 0, i64 0), !dbg !14
; CHECK-NEXT:    [[TMP10:%.*]] = load %nanos6_task_args__Z13non_pod_arrayv1*, %nanos6_task_args__Z13non_pod_arrayv1** [[TMP7]], align 8, !dbg !14
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast %nanos6_task_args__Z13non_pod_arrayv1* [[TMP10]] to i8*, !dbg !14
; CHECK-NEXT:    [[ARGS_END5:%.*]] = getelementptr i8, i8* [[TMP11]], i64 48, !dbg !14
; CHECK-NEXT:    [[GEP_ARRAY6:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYV1:%.*]], %nanos6_task_args__Z13non_pod_arrayv1* [[TMP10]], i32 0, i32 0, !dbg !14
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast [10 x %struct.S]* [[GEP_ARRAY6]] to %struct.S*, !dbg !14
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast [10 x %struct.S]* [[ARRAY]] to %struct.S*, !dbg !14
; CHECK-NEXT:    call void @oss_copy_ctor_ZN1SC1ERKS_(%struct.S* [[TMP13]], %struct.S* [[TMP12]], i64 10), !dbg !14
; CHECK-NEXT:    [[TMP14:%.*]] = load i8*, i8** [[TMP9]], align 8, !dbg !14
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP14]]), !dbg !14
; CHECK-NEXT:    br label [[FINAL_END1:%.*]], !dbg !14
; CHECK:       final.end1:
; CHECK-NEXT:    ret void, !dbg !15
; CHECK:       final.then:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg !14
; CHECK:       final.then3:
; CHECK-NEXT:    br label [[FINAL_END1]], !dbg !15
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP15:%.*]] = call i32 @nanos6_in_final(), !dbg !13
; CHECK-NEXT:    [[TMP16:%.*]] = icmp ne i32 [[TMP15]], 0, !dbg !13
; CHECK-NEXT:    br i1 [[TMP16]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg !13
; CHECK:       final.cond2:
; CHECK-NEXT:    [[TMP17:%.*]] = call i32 @nanos6_in_final(), !dbg !14
; CHECK-NEXT:    [[TMP18:%.*]] = icmp ne i32 [[TMP17]], 0, !dbg !14
; CHECK-NEXT:    br i1 [[TMP18]], label [[FINAL_THEN3:%.*]], label [[CODEREPL4:%.*]], !dbg !14
;
entry:
  %array = alloca [10 x %struct.S], align 16
  %array.begin = getelementptr inbounds [10 x %struct.S], [10 x %struct.S]* %array, i32 0, i32 0, !dbg !14
  %arrayctor.end = getelementptr inbounds %struct.S, %struct.S* %array.begin, i64 10, !dbg !14
  br label %arrayctor.loop, !dbg !14

arrayctor.loop:                                   ; preds = %arrayctor.loop, %entry
  %arrayctor.cur = phi %struct.S* [ %array.begin, %entry ], [ %arrayctor.next, %arrayctor.loop ], !dbg !14
  call void @_ZN1SC1Ev(%struct.S* %arrayctor.cur), !dbg !14
  %arrayctor.next = getelementptr inbounds %struct.S, %struct.S* %arrayctor.cur, i64 1, !dbg !14
  %arrayctor.done = icmp eq %struct.S* %arrayctor.next, %arrayctor.end, !dbg !14
  br i1 %arrayctor.done, label %arrayctor.cont, label %arrayctor.loop, !dbg !14

arrayctor.cont:                                   ; preds = %arrayctor.loop
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.PRIVATE"([10 x %struct.S]* %array), "QUAL.OSS.INIT"([10 x %struct.S]* %array, void (%struct.S*, i64)* @oss_ctor_ZN1SC1Ev), "QUAL.OSS.DEINIT"([10 x %struct.S]* %array, void (%struct.S*, i64)* @oss_dtor_ZN1SD1Ev) ], !dbg !15
  call void @llvm.directive.region.exit(token %0), !dbg !16
  %1 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"([10 x %struct.S]* %array), "QUAL.OSS.COPY"([10 x %struct.S]* %array, void (%struct.S*, %struct.S*, i64)* @oss_copy_ctor_ZN1SC1ERKS_), "QUAL.OSS.DEINIT"([10 x %struct.S]* %array, void (%struct.S*, i64)* @oss_dtor_ZN1SD1Ev) ], !dbg !17
  call void @llvm.directive.region.exit(token %1), !dbg !18
  ret void, !dbg !19

}

; CHECK: define internal void @nanos6_unpacked_task_region__Z13non_pod_arrayv0([10 x %struct.S]* %array, i8* %device_env, %nanos6_address_translation_entry_t* %address_translation_table) !dbg !20 {
; CHECK:   call void @oss_dtor_ZN1SD1Ev(%struct.S* %1, i64 10)
; CHECK: }

; CHECK: define internal void @nanos6_unpacked_task_region__Z13non_pod_arrayv1([10 x %struct.S]* %array, i8* %device_env, %nanos6_address_translation_entry_t* %address_translation_table) !dbg !22 {
; CHECK:   call void @oss_dtor_ZN1SD1Ev(%struct.S* %1, i64 10)
; CHECK: }

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
declare dso_local void @_ZN1SC1Ev(%struct.S*)
declare dso_local void @oss_ctor_ZN1SC1Ev(%struct.S* %0, i64 %1)
declare dso_local void @_ZN1SD1Ev(%struct.S*)
declare dso_local void @oss_dtor_ZN1SD1Ev(%struct.S* %0, i64 %1)
declare dso_local void @_ZN1SC2ERKS_(%struct.S* %this, %struct.S* dereferenceable(4) %0)
declare dso_local void @oss_copy_ctor_ZN1SC1ERKS_(%struct.S* %0, %struct.S* %1, i64 %2)
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg)

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}
!llvm.ident = !{!5}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: "human", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, enums: !2, nameTableKind: None)
!1 = !DIFile(filename: "task_array.ll", directory: "llvm/test/Transforms/OmpSs")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{!""}
!6 = distinct !DISubprogram(name: "pod_array", scope: !1, file: !1, line: 1, type: !7, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!7 = !DISubroutineType(types: !2)
!8 = !DILocation(line: 3, column: 13, scope: !6)
!9 = !DILocation(line: 4, column: 6, scope: !6)
!10 = !DILocation(line: 5, column: 13, scope: !6)
!11 = !DILocation(line: 6, column: 6, scope: !6)
!12 = !DILocation(line: 7, column: 1, scope: !6)
!13 = distinct !DISubprogram(name: "non_pod_array", scope: !1, file: !1, line: 14, type: !7, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!14 = !DILocation(line: 15, column: 7, scope: !13)
!15 = !DILocation(line: 16, column: 13, scope: !13)
!16 = !DILocation(line: 17, column: 6, scope: !13)
!17 = !DILocation(line: 18, column: 13, scope: !13)
!18 = !DILocation(line: 19, column: 6, scope: !13)
!19 = !DILocation(line: 20, column: 1, scope: !13)

