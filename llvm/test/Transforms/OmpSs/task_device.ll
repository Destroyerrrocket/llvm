; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -ompss-2 -S | FileCheck %s
; ModuleID = 'task_devices.ll'
source_filename = "task_devices.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Do check for device id in impl. info, sizeof offset arrays and ndrange capture

; #pragma oss task device(cuda) ndrange(1, 1, 2)
; void foo(char a, short s, int i) {}
;
; int main() {
;     foo(1, 1, 1);
; }

; CHECK: @sizeof_table_var_main666 = internal constant [3 x i32] [i32 1, i32 2, i32 4], align 64
; CHECK: @offset_table_var_main666 = internal constant [3 x i32] [i32 56, i32 58, i32 60], align 64
; CHECK: @arg_idx_table_var_main666 = internal constant [0 x i32] zeroinitializer, align 64
; CHECK: @implementations_var_main666 = internal constant [1 x %nanos6_task_implementation_info_t] [%nanos6_task_implementation_info_t { i32 1

; CHECK: @sizeof_table_var_main0 = internal constant [3 x i32] [i32 1, i32 2, i32 4], align 64
; CHECK: @offset_table_var_main0 = internal constant [3 x i32] [i32 56, i32 58, i32 60], align 64
; CHECK: @arg_idx_table_var_main0 = internal constant [0 x i32] zeroinitializer, align 64
; CHECK: @implementations_var_main0 = internal constant [1 x %nanos6_task_implementation_info_t] [%nanos6_task_implementation_info_t { i32 1

; Function Attrs: noinline nounwind optnone
define dso_local void @foo(i8 noundef signext %a, i16 noundef signext %s, i32 noundef %i) #0 !dbg !5 {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[A_ADDR:%.*]] = alloca i8, align 1
; CHECK-NEXT:    [[S_ADDR:%.*]] = alloca i16, align 2
; CHECK-NEXT:    [[I_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i8 [[A:%.*]], i8* [[A_ADDR]], align 1
; CHECK-NEXT:    store i16 [[S:%.*]], i16* [[S_ADDR]], align 2
; CHECK-NEXT:    store i32 [[I:%.*]], i32* [[I_ADDR]], align 4
; CHECK-NEXT:    ret void, !dbg [[DBG9:![0-9]+]]
;
entry:
  %a.addr = alloca i8, align 1
  %s.addr = alloca i16, align 2
  %i.addr = alloca i32, align 4
  store i8 %a, i8* %a.addr, align 1
  store i16 %s, i16* %s.addr, align 2
  store i32 %i, i32* %i.addr, align 4
  ret void, !dbg !9
}

; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 !dbg !10 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL_ARG:%.*]] = alloca i8, align 1
; CHECK-NEXT:    [[CALL_ARG1:%.*]] = alloca i16, align 2
; CHECK-NEXT:    [[CALL_ARG2:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i8 1, i8* [[CALL_ARG]], align 1, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    store i16 1, i16* [[CALL_ARG1]], align 2, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    store i32 1, i32* [[CALL_ARG2]], align 4, !dbg [[DBG13:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = alloca %nanos6_task_args_main666*, align 8, !dbg [[DBG14:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca i8*, align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca %nanos6_task_args_main0*, align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP3:%.*]] = alloca i8*, align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[NUM_DEPS5:%.*]] = alloca i64, align 8, !dbg [[DBG14]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG14]]
; CHECK:       codeRepl4:
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast %nanos6_task_args_main0** [[TMP2]] to i8**, !dbg [[DBG14]]
; CHECK-NEXT:    store i64 0, i64* [[NUM_DEPS5]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, i64* [[NUM_DEPS5]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    call void @nanos6_create_task(%nanos6_task_info_t* @task_info_var_main0, %nanos6_task_invocation_info_t* @task_invocation_info_main0, i8* null, i64 64, i8** [[TMP4]], i8** [[TMP3]], i64 0, i64 [[TMP5]]), !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP6:%.*]] = load %nanos6_task_args_main0*, %nanos6_task_args_main0** [[TMP2]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast %nanos6_task_args_main0* [[TMP6]] to i8*, !dbg [[DBG14]]
; CHECK-NEXT:    [[ARGS_END6:%.*]] = getelementptr i8, i8* [[TMP7]], i64 64, !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE07:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN0:%.*]], %nanos6_task_args_main0* [[TMP6]], i32 0, i32 0, !dbg [[DBG14]]
; CHECK-NEXT:    store i64 1, i64* [[GEP_DEV_NDRANGE07]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE18:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN0]], %nanos6_task_args_main0* [[TMP6]], i32 0, i32 1, !dbg [[DBG14]]
; CHECK-NEXT:    store i64 -1, i64* [[GEP_DEV_NDRANGE18]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE29:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN0]], %nanos6_task_args_main0* [[TMP6]], i32 0, i32 2, !dbg [[DBG14]]
; CHECK-NEXT:    store i64 -1, i64* [[GEP_DEV_NDRANGE29]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE010:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN0]], %nanos6_task_args_main0* [[TMP6]], i32 0, i32 3, !dbg [[DBG14]]
; CHECK-NEXT:    store i64 2, i64* [[GEP_DEV_NDRANGE010]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE111:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN0]], %nanos6_task_args_main0* [[TMP6]], i32 0, i32 4, !dbg [[DBG14]]
; CHECK-NEXT:    store i64 -1, i64* [[GEP_DEV_NDRANGE111]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE212:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN0]], %nanos6_task_args_main0* [[TMP6]], i32 0, i32 5, !dbg [[DBG14]]
; CHECK-NEXT:    store i64 -1, i64* [[GEP_DEV_NDRANGE212]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_DEV_SHM13:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN0]], %nanos6_task_args_main0* [[TMP6]], i32 0, i32 6, !dbg [[DBG14]]
; CHECK-NEXT:    store i64 0, i64* [[GEP_DEV_SHM13]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_CALL_ARG14:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN0]], %nanos6_task_args_main0* [[TMP6]], i32 0, i32 7, !dbg [[DBG14]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 [[GEP_CALL_ARG14]], i8* align 1 [[CALL_ARG]], i64 1, i1 false), !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_CALL_ARG115:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN0]], %nanos6_task_args_main0* [[TMP6]], i32 0, i32 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast i16* [[GEP_CALL_ARG115]] to i8*, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast i16* [[CALL_ARG1]] to i8*, !dbg [[DBG14]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 [[TMP8]], i8* align 2 [[TMP9]], i64 2, i1 false), !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_CALL_ARG216:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN0]], %nanos6_task_args_main0* [[TMP6]], i32 0, i32 9, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast i32* [[GEP_CALL_ARG216]] to i8*, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast i32* [[CALL_ARG2]] to i8*, !dbg [[DBG14]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP10]], i8* align 4 [[TMP11]], i64 4, i1 false), !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP12:%.*]] = load i8*, i8** [[TMP3]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP12]]), !dbg [[DBG14]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG14]]
; CHECK:       final.end:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG15:![0-9]+]]
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast %nanos6_task_args_main666** [[TMP0]] to i8**, !dbg [[DBG14]]
; CHECK-NEXT:    store i64 0, i64* [[NUM_DEPS]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP14:%.*]] = load i64, i64* [[NUM_DEPS]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    call void @nanos6_create_task(%nanos6_task_info_t* @task_info_var_main666, %nanos6_task_invocation_info_t* @task_invocation_info_main666, i8* null, i64 64, i8** [[TMP13]], i8** [[TMP1]], i64 0, i64 [[TMP14]]), !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP15:%.*]] = load %nanos6_task_args_main666*, %nanos6_task_args_main666** [[TMP0]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast %nanos6_task_args_main666* [[TMP15]] to i8*, !dbg [[DBG14]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, i8* [[TMP16]], i64 64, !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE0:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN666:%.*]], %nanos6_task_args_main666* [[TMP15]], i32 0, i32 0, !dbg [[DBG14]]
; CHECK-NEXT:    store i64 1, i64* [[GEP_DEV_NDRANGE0]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE1:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN666]], %nanos6_task_args_main666* [[TMP15]], i32 0, i32 1, !dbg [[DBG14]]
; CHECK-NEXT:    store i64 -1, i64* [[GEP_DEV_NDRANGE1]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE2:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN666]], %nanos6_task_args_main666* [[TMP15]], i32 0, i32 2, !dbg [[DBG14]]
; CHECK-NEXT:    store i64 -1, i64* [[GEP_DEV_NDRANGE2]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE01:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN666]], %nanos6_task_args_main666* [[TMP15]], i32 0, i32 3, !dbg [[DBG14]]
; CHECK-NEXT:    store i64 2, i64* [[GEP_DEV_NDRANGE01]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE12:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN666]], %nanos6_task_args_main666* [[TMP15]], i32 0, i32 4, !dbg [[DBG14]]
; CHECK-NEXT:    store i64 -1, i64* [[GEP_DEV_NDRANGE12]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE23:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN666]], %nanos6_task_args_main666* [[TMP15]], i32 0, i32 5, !dbg [[DBG14]]
; CHECK-NEXT:    store i64 -1, i64* [[GEP_DEV_NDRANGE23]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_DEV_SHM:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN666]], %nanos6_task_args_main666* [[TMP15]], i32 0, i32 6, !dbg [[DBG14]]
; CHECK-NEXT:    store i64 0, i64* [[GEP_DEV_SHM]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_CALL_ARG:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN666]], %nanos6_task_args_main666* [[TMP15]], i32 0, i32 7, !dbg [[DBG14]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 [[GEP_CALL_ARG]], i8* align 1 [[CALL_ARG]], i64 1, i1 false), !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_CALL_ARG1:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN666]], %nanos6_task_args_main666* [[TMP15]], i32 0, i32 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast i16* [[GEP_CALL_ARG1]] to i8*, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP18:%.*]] = bitcast i16* [[CALL_ARG1]] to i8*, !dbg [[DBG14]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 [[TMP17]], i8* align 2 [[TMP18]], i64 2, i1 false), !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_CALL_ARG2:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN666]], %nanos6_task_args_main666* [[TMP15]], i32 0, i32 9, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast i32* [[GEP_CALL_ARG2]] to i8*, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast i32* [[CALL_ARG2]] to i8*, !dbg [[DBG14]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP19]], i8* align 4 [[TMP20]], i64 4, i1 false), !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP21:%.*]] = load i8*, i8** [[TMP1]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP21]]), !dbg [[DBG14]]
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG14]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP22:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP23:%.*]] = icmp ne i32 [[TMP22]], 0, !dbg [[DBG14]]
; CHECK-NEXT:    br i1 [[TMP23]], label [[CODEREPL:%.*]], label [[CODEREPL4:%.*]], !dbg [[DBG14]]
;
entry:
  %call_arg = alloca i8, align 1
  %call_arg1 = alloca i16, align 2
  %call_arg2 = alloca i32, align 4
  store i8 1, i8* %call_arg, align 1, !dbg !11
  store i16 1, i16* %call_arg1, align 2, !dbg !12
  store i32 1, i32* %call_arg2, align 4, !dbg !13
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"(i8* %call_arg), "QUAL.OSS.FIRSTPRIVATE"(i16* %call_arg1), "QUAL.OSS.FIRSTPRIVATE"(i32* %call_arg2), "QUAL.OSS.DEVICE"(i32 1), "QUAL.OSS.DEVICE.DEVFUNC"([4 x i8] c"foo\00"), "QUAL.OSS.DEVICE.NDRANGE"(i32 1, i32 1, i32 2), "QUAL.OSS.DECL.SOURCE"([8 x i8] c"foo:1:9\00") ], !dbg !14
  call void @llvm.directive.region.exit(token %0), !dbg !14
  ret i32 0, !dbg !15
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

attributes #0 = { noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "human", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!""}
!5 = distinct !DISubprogram(name: "foo", scope: !6, file: !6, line: 2, type: !7, scopeLine: 2, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!6 = !DIFile(filename: "task_devices.ll", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 2, column: 35, scope: !5)
!10 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 4, type: !7, scopeLine: 4, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!11 = !DILocation(line: 5, column: 9, scope: !10)
!12 = !DILocation(line: 5, column: 12, scope: !10)
!13 = !DILocation(line: 5, column: 15, scope: !10)
!14 = !DILocation(line: 5, column: 5, scope: !10)
!15 = !DILocation(line: 6, column: 1, scope: !10)
