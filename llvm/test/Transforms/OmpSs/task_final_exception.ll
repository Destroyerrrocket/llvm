; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -ompss-2 -S | FileCheck %s
; ModuleID = 't3.ll'
source_filename = "t3.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%nanos6_task_invocation_info_t = type { i8* }
%nanos6_task_implementation_info_t = type { i32, void ()*, void ()*, i8*, i8*, void ()* }
%nanos6_task_info_t = type { i32, void ()*, void ()*, i8*, i32, {}*, void ()*, void ()*, void ()**, void ()** }
%struct.S = type { i8 }
%nanos6_task_args_main0 = type { %struct.S }
%nanos6_address_translation_entry_t = type opaque

$_ZN1SC2ERKS_ = comdat any

$_ZN1SD2Ev = comdat any

$__clang_call_terminate = comdat any

@0 = private unnamed_addr constant [11 x i8] c"t3.ll:9:13\00", align 1
@task_invocation_info_main0 = internal constant %nanos6_task_invocation_info_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i32 0, i32 0) }, align 64
@implementations_var_main0 = internal constant [1 x %nanos6_task_implementation_info_t] [%nanos6_task_implementation_info_t { i32 0, void ()* bitcast (void (%nanos6_task_args_main0*, i8*, %nanos6_address_translation_entry_t*)* @nanos6_ol_task_region_main0 to void ()*), void ()* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i32 0, i32 0), void ()* null }], align 64
@task_info_var_main0 = internal constant %nanos6_task_info_t { i32 0, void ()* bitcast (void (%nanos6_task_args_main0*, i8*)* @nanos6_ol_deps_main0 to void ()*), void ()* null, i8* null, i32 1, {}* bitcast ([1 x %nanos6_task_implementation_info_t]* @implementations_var_main0 to {}*), void ()* null, void ()* null, void ()** null, void ()** null }, align 64

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @_Z3fooRK1S(%struct.S* dereferenceable(1) %s) #0 !dbg !6 {
; CHECK-LABEL: @_Z3fooRK1S(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[S_ADDR:%.*]] = alloca %struct.S*, align 8
; CHECK-NEXT:    store %struct.S* [[S:%.*]], %struct.S** [[S_ADDR]], align 8
; CHECK-NEXT:    ret void, !dbg !8
;
entry:
  %s.addr = alloca %struct.S*, align 8
  store %struct.S* %s, %struct.S** %s.addr, align 8
  ret void, !dbg !8
}

; Function Attrs: noinline norecurse nounwind optnone uwtable
define dso_local i32 @main() #1 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) !dbg !9 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[S:%.*]] = alloca [[STRUCT_S:%.*]], align 1
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg !10
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca %nanos6_task_args_main0*, !dbg !10
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast %nanos6_task_args_main0** [[TMP0]] to i8**, !dbg !10
; CHECK-NEXT:    [[TMP2:%.*]] = alloca i8*, !dbg !10
; CHECK-NEXT:    call void @nanos6_create_task(%nanos6_task_info_t* @task_info_var_main0, %nanos6_task_invocation_info_t* @task_invocation_info_main0, i64 16, i8** [[TMP1]], i8** [[TMP2]], i64 1, i64 0), !dbg !10
; CHECK-NEXT:    [[TMP3:%.*]] = load %nanos6_task_args_main0*, %nanos6_task_args_main0** [[TMP0]], !dbg !10
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast %nanos6_task_args_main0* [[TMP3]] to i8*, !dbg !10
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, i8* [[TMP4]], i64 16, !dbg !10
; CHECK-NEXT:    [[GEP_S:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN0:%.*]], %nanos6_task_args_main0* [[TMP3]], i32 0, i32 0, !dbg !10
; CHECK-NEXT:    call void @oss_copy_ctor_ZN1SC1ERKS_(%struct.S* [[S]], %struct.S* [[GEP_S]], i64 1), !dbg !10
; CHECK-NEXT:    [[TMP5:%.*]] = load i8*, i8** [[TMP2]], !dbg !10
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP5]]), !dbg !10
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg !10
; CHECK:       final.end:
; CHECK-NEXT:    call void @_ZN1SD2Ev(%struct.S* [[S]]) #2, !dbg !11
; CHECK-NEXT:    ret i32 0, !dbg !11
; CHECK:       final.then:
; CHECK-NEXT:    invoke void @_Z3fooRK1S(%struct.S* dereferenceable(1) [[S]])
; CHECK-NEXT:    to label [[INVOKE_CONT_CLONE:%.*]] unwind label [[TERMINATE_LPAD_CLONE:%.*]], !dbg !12
; CHECK:       invoke.cont.clone:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg !11
; CHECK:       terminate.lpad.clone:
; CHECK-NEXT:    [[TMP6:%.*]] = landingpad { i8*, i32 }
; CHECK-NEXT:    catch i8* null, !dbg !12
; CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { i8*, i32 } [[TMP6]], 0, !dbg !12
; CHECK-NEXT:    call void @__clang_call_terminate(i8* [[TMP7]]) #5, !dbg !12
; CHECK-NEXT:    unreachable, !dbg !12
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP8:%.*]] = call i32 @nanos6_in_final(), !dbg !10
; CHECK-NEXT:    [[TMP9:%.*]] = icmp ne i32 [[TMP8]], 0, !dbg !10
; CHECK-NEXT:    br i1 [[TMP9]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg !10
;
entry:
  %s = alloca %struct.S, align 1
  br label %final.cond, !dbg !10

codeRepl:                                         ; preds = %final.cond
  %0 = alloca %nanos6_task_args_main0*, !dbg !10
  %1 = bitcast %nanos6_task_args_main0** %0 to i8**, !dbg !10
  %2 = alloca i8*, !dbg !10
  call void @nanos6_create_task(%nanos6_task_info_t* @task_info_var_main0, %nanos6_task_invocation_info_t* @task_invocation_info_main0, i64 16, i8** %1, i8** %2, i64 1, i64 0), !dbg !10
  %3 = load %nanos6_task_args_main0*, %nanos6_task_args_main0** %0, !dbg !10
  %4 = bitcast %nanos6_task_args_main0* %3 to i8*, !dbg !10
  %args_end = getelementptr i8, i8* %4, i64 16, !dbg !10
  %gep_s = getelementptr %nanos6_task_args_main0, %nanos6_task_args_main0* %3, i32 0, i32 0, !dbg !10
  call void @oss_copy_ctor_ZN1SC1ERKS_(%struct.S* %s, %struct.S* %gep_s, i64 1), !dbg !10
  %5 = load i8*, i8** %2, !dbg !10
  call void @nanos6_submit_task(i8* %5), !dbg !10
  br label %final.end, !dbg !10

final.end:                                        ; preds = %codeRepl, %invoke.cont.clone
  call void @_ZN1SD2Ev(%struct.S* %s) #2, !dbg !11
  ret i32 0, !dbg !11

final.then:                                       ; preds = %final.cond
  invoke void @_Z3fooRK1S(%struct.S* dereferenceable(1) %s)
  to label %invoke.cont.clone unwind label %terminate.lpad.clone, !dbg !12

invoke.cont.clone:                                ; preds = %final.then
  br label %final.end, !dbg !11

terminate.lpad.clone:                             ; preds = %final.then
  %6 = landingpad { i8*, i32 }
  catch i8* null, !dbg !12
  %7 = extractvalue { i8*, i32 } %6, 0, !dbg !12
  call void @__clang_call_terminate(i8* %7) #5, !dbg !12
  unreachable, !dbg !12

final.cond:                                       ; preds = %entry
  %8 = call i32 @nanos6_in_final(), !dbg !10
  %9 = icmp ne i32 %8, 0, !dbg !10
  br i1 %9, label %final.then, label %codeRepl, !dbg !10
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #2

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #2

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN1SC2ERKS_(%struct.S* %this, %struct.S* dereferenceable(1) %0) unnamed_addr #0 comdat align 2 !dbg !13 {
; CHECK-LABEL: @_ZN1SC2ERKS_(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca %struct.S*, align 8
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca %struct.S*, align 8
; CHECK-NEXT:    store %struct.S* [[THIS:%.*]], %struct.S** [[THIS_ADDR]], align 8
; CHECK-NEXT:    store %struct.S* [[TMP0:%.*]], %struct.S** [[DOTADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load %struct.S*, %struct.S** [[THIS_ADDR]], align 8
; CHECK-NEXT:    ret void, !dbg !14
;
entry:
  %this.addr = alloca %struct.S*, align 8
  %.addr = alloca %struct.S*, align 8
  store %struct.S* %this, %struct.S** %this.addr, align 8
  store %struct.S* %0, %struct.S** %.addr, align 8
  %this1 = load %struct.S*, %struct.S** %this.addr, align 8
  ret void, !dbg !14
}

; Function Attrs: noinline norecurse uwtable
define internal void @oss_copy_ctor_ZN1SC1ERKS_(%struct.S* %0, %struct.S* %1, i64 %2) #3 !dbg !15 {
; CHECK-LABEL: @oss_copy_ctor_ZN1SC1ERKS_(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca %struct.S*, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca %struct.S*, align 8
; CHECK-NEXT:    [[DOTADDR2:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store %struct.S* [[TMP0:%.*]], %struct.S** [[DOTADDR]], align 8
; CHECK-NEXT:    store %struct.S* [[TMP1:%.*]], %struct.S** [[DOTADDR1]], align 8
; CHECK-NEXT:    store i64 [[TMP2:%.*]], i64* [[DOTADDR2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = load %struct.S*, %struct.S** [[DOTADDR]], align 8, !dbg !16
; CHECK-NEXT:    [[TMP4:%.*]] = load %struct.S*, %struct.S** [[DOTADDR1]], align 8, !dbg !16
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, i64* [[DOTADDR2]], align 8, !dbg !16
; CHECK-NEXT:    [[ARRAYCTOR_DST_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], %struct.S* [[TMP4]], i64 [[TMP5]], !dbg !16
; CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]], !dbg !16
; CHECK:       arrayctor.loop:
; CHECK-NEXT:    [[ARRAYCTOR_DST_CUR:%.*]] = phi %struct.S* [ [[TMP4]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_DST_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg !16
; CHECK-NEXT:    [[ARRAYCTOR_SRC_CUR:%.*]] = phi %struct.S* [ [[TMP3]], [[ENTRY]] ], [ [[ARRAYCTOR_SRC_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg !16
; CHECK-NEXT:    [[ARRAYCTOR_DST_NEXT]] = getelementptr inbounds [[STRUCT_S]], %struct.S* [[ARRAYCTOR_DST_CUR]], i64 1, !dbg !16
; CHECK-NEXT:    [[ARRAYCTOR_SRC_NEXT]] = getelementptr inbounds [[STRUCT_S]], %struct.S* [[ARRAYCTOR_SRC_CUR]], i64 1, !dbg !16
; CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq %struct.S* [[ARRAYCTOR_DST_NEXT]], [[ARRAYCTOR_DST_END]], !dbg !16
; CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]], !dbg !16
; CHECK:       arrayctor.cont:
; CHECK-NEXT:    ret void, !dbg !17
;
entry:
  %.addr = alloca %struct.S*, align 8
  %.addr1 = alloca %struct.S*, align 8
  %.addr2 = alloca i64, align 8
  store %struct.S* %0, %struct.S** %.addr, align 8
  store %struct.S* %1, %struct.S** %.addr1, align 8
  store i64 %2, i64* %.addr2, align 8
  %3 = load %struct.S*, %struct.S** %.addr, align 8, !dbg !16
  %4 = load %struct.S*, %struct.S** %.addr1, align 8, !dbg !16
  %5 = load i64, i64* %.addr2, align 8, !dbg !16
  %arrayctor.dst.end = getelementptr inbounds %struct.S, %struct.S* %4, i64 %5, !dbg !16
  br label %arrayctor.loop, !dbg !16

arrayctor.loop:                                   ; preds = %arrayctor.loop, %entry
  %arrayctor.dst.cur = phi %struct.S* [ %4, %entry ], [ %arrayctor.dst.next, %arrayctor.loop ], !dbg !16
  %arrayctor.src.cur = phi %struct.S* [ %3, %entry ], [ %arrayctor.src.next, %arrayctor.loop ], !dbg !16
  %arrayctor.dst.next = getelementptr inbounds %struct.S, %struct.S* %arrayctor.dst.cur, i64 1, !dbg !16
  %arrayctor.src.next = getelementptr inbounds %struct.S, %struct.S* %arrayctor.src.cur, i64 1, !dbg !16
  %arrayctor.done = icmp eq %struct.S* %arrayctor.dst.next, %arrayctor.dst.end, !dbg !16
  br i1 %arrayctor.done, label %arrayctor.cont, label %arrayctor.loop, !dbg !16

arrayctor.cont:                                   ; preds = %arrayctor.loop
  ret void, !dbg !17
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN1SD2Ev(%struct.S* %this) unnamed_addr #0 comdat align 2 !dbg !18 {
; CHECK-LABEL: @_ZN1SD2Ev(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca %struct.S*, align 8
; CHECK-NEXT:    store %struct.S* [[THIS:%.*]], %struct.S** [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load %struct.S*, %struct.S** [[THIS_ADDR]], align 8
; CHECK-NEXT:    ret void, !dbg !19
;
entry:
  %this.addr = alloca %struct.S*, align 8
  store %struct.S* %this, %struct.S** %this.addr, align 8
  %this1 = load %struct.S*, %struct.S** %this.addr, align 8
  ret void, !dbg !19
}

; Function Attrs: noinline norecurse uwtable
define internal void @oss_dtor_ZN1SD1Ev(%struct.S* %0, i64 %1) #3 !dbg !20 {
; CHECK-LABEL: @oss_dtor_ZN1SD1Ev(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca %struct.S*, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store %struct.S* [[TMP0:%.*]], %struct.S** [[DOTADDR]], align 8
; CHECK-NEXT:    store i64 [[TMP1:%.*]], i64* [[DOTADDR1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = load %struct.S*, %struct.S** [[DOTADDR]], align 8, !dbg !21
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, i64* [[DOTADDR1]], align 8, !dbg !21
; CHECK-NEXT:    [[ARRAYDTOR_DST_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], %struct.S* [[TMP2]], i64 [[TMP3]], !dbg !21
; CHECK-NEXT:    br label [[ARRAYDTOR_LOOP:%.*]], !dbg !21
; CHECK:       arraydtor.loop:
; CHECK-NEXT:    [[ARRAYDTOR_DST_CUR:%.*]] = phi %struct.S* [ [[TMP2]], [[ENTRY:%.*]] ], [ [[ARRAYDTOR_DST_NEXT:%.*]], [[ARRAYDTOR_LOOP]] ], !dbg !21
; CHECK-NEXT:    call void @_ZN1SD2Ev(%struct.S* [[ARRAYDTOR_DST_CUR]]) #2, !dbg !21
; CHECK-NEXT:    [[ARRAYDTOR_DST_NEXT]] = getelementptr inbounds [[STRUCT_S]], %struct.S* [[ARRAYDTOR_DST_CUR]], i64 1, !dbg !21
; CHECK-NEXT:    [[ARRAYDTOR_DONE:%.*]] = icmp eq %struct.S* [[ARRAYDTOR_DST_NEXT]], [[ARRAYDTOR_DST_END]], !dbg !21
; CHECK-NEXT:    br i1 [[ARRAYDTOR_DONE]], label [[ARRAYDTOR_CONT:%.*]], label [[ARRAYDTOR_LOOP]], !dbg !21
; CHECK:       arraydtor.cont:
; CHECK-NEXT:    ret void, !dbg !21
;
entry:
  %.addr = alloca %struct.S*, align 8
  %.addr1 = alloca i64, align 8
  store %struct.S* %0, %struct.S** %.addr, align 8
  store i64 %1, i64* %.addr1, align 8
  %2 = load %struct.S*, %struct.S** %.addr, align 8, !dbg !21
  %3 = load i64, i64* %.addr1, align 8, !dbg !21
  %arraydtor.dst.end = getelementptr inbounds %struct.S, %struct.S* %2, i64 %3, !dbg !21
  br label %arraydtor.loop, !dbg !21

arraydtor.loop:                                   ; preds = %arraydtor.loop, %entry
  %arraydtor.dst.cur = phi %struct.S* [ %2, %entry ], [ %arraydtor.dst.next, %arraydtor.loop ], !dbg !21
  call void @_ZN1SD2Ev(%struct.S* %arraydtor.dst.cur) #2, !dbg !21
  %arraydtor.dst.next = getelementptr inbounds %struct.S, %struct.S* %arraydtor.dst.cur, i64 1, !dbg !21
  %arraydtor.done = icmp eq %struct.S* %arraydtor.dst.next, %arraydtor.dst.end, !dbg !21
  br i1 %arraydtor.done, label %arraydtor.cont, label %arraydtor.loop, !dbg !21

arraydtor.cont:                                   ; preds = %arraydtor.loop
  ret void, !dbg !21
}

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: noinline noreturn nounwind
define linkonce_odr hidden void @__clang_call_terminate(i8* %0) #4 comdat {
; CHECK-LABEL: @__clang_call_terminate(
; CHECK-NEXT:    [[TMP2:%.*]] = call i8* @__cxa_begin_catch(i8* [[TMP0:%.*]]) #2
; CHECK-NEXT:    call void @_ZSt9terminatev() #5
; CHECK-NEXT:    unreachable
;
  %2 = call i8* @__cxa_begin_catch(i8* %0) #2
  call void @_ZSt9terminatev() #5
  unreachable
}

declare dso_local i8* @__cxa_begin_catch(i8*)

declare dso_local void @_ZSt9terminatev()

declare void @nanos6_create_task(%nanos6_task_info_t*, %nanos6_task_invocation_info_t*, i64, i8**, i8**, i64, i64)

declare void @nanos6_submit_task(i8*)

declare i32 @nanos6_in_final()

define internal void @nanos6_unpacked_task_region_main0(%struct.S* %s, i8* %device_env, %nanos6_address_translation_entry_t* %address_translation_table) personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
; CHECK-LABEL: @nanos6_unpacked_task_region_main0(
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg !12
; CHECK:       0:
; CHECK-NEXT:    invoke void @_Z3fooRK1S(%struct.S* dereferenceable(1) [[S:%.*]])
; CHECK-NEXT:    to label [[INVOKE_CONT:%.*]] unwind label [[TERMINATE_LPAD:%.*]], !dbg !12
; CHECK:       invoke.cont:
; CHECK-NEXT:    call void @oss_dtor_ZN1SD1Ev(%struct.S* [[S]], i64 1), !dbg !11
; CHECK-NEXT:    ret void, !dbg !11
; CHECK:       terminate.lpad:
; CHECK-NEXT:    [[TMP1:%.*]] = landingpad { i8*, i32 }
; CHECK-NEXT:    catch i8* null, !dbg !12
; CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i8*, i32 } [[TMP1]], 0, !dbg !12
; CHECK-NEXT:    call void @__clang_call_terminate(i8* [[TMP2]]) #5, !dbg !12
; CHECK-NEXT:    unreachable, !dbg !12
;
newFuncRoot:
  br label %0, !dbg !12

0:                                                ; preds = %newFuncRoot
  invoke void @_Z3fooRK1S(%struct.S* dereferenceable(1) %s)
  to label %invoke.cont unwind label %terminate.lpad, !dbg !12

invoke.cont:                                      ; preds = %0
  call void @oss_dtor_ZN1SD1Ev(%struct.S* %s, i64 1), !dbg !11
  ret void, !dbg !11

terminate.lpad:                                   ; preds = %0
  %1 = landingpad { i8*, i32 }
  catch i8* null, !dbg !12
  %2 = extractvalue { i8*, i32 } %1, 0, !dbg !12
  call void @__clang_call_terminate(i8* %2) #5, !dbg !12
  unreachable, !dbg !12
}

define internal void @nanos6_ol_task_region_main0(%nanos6_task_args_main0* %task_args, i8* %device_env, %nanos6_address_translation_entry_t* %address_translation_table) {
; CHECK-LABEL: @nanos6_ol_task_region_main0(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_S:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN0:%.*]], %nanos6_task_args_main0* [[TASK_ARGS:%.*]], i32 0, i32 0
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main0(%struct.S* [[GEP_S]], i8* [[DEVICE_ENV:%.*]], %nanos6_address_translation_entry_t* [[ADDRESS_TRANSLATION_TABLE:%.*]])
; CHECK-NEXT:    ret void
;
entry:
  %gep_s = getelementptr %nanos6_task_args_main0, %nanos6_task_args_main0* %task_args, i32 0, i32 0
  call void @nanos6_unpacked_task_region_main0(%struct.S* %gep_s, i8* %device_env, %nanos6_address_translation_entry_t* %address_translation_table)
  ret void
}

define internal void @nanos6_unpacked_deps_main0(%struct.S* %s, i8* %handler) {
; CHECK-LABEL: @nanos6_unpacked_deps_main0(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void
;
entry:
  ret void
}

define internal void @nanos6_ol_deps_main0(%nanos6_task_args_main0* %task_args, i8* %handler) {
; CHECK-LABEL: @nanos6_ol_deps_main0(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_S:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN0:%.*]], %nanos6_task_args_main0* [[TASK_ARGS:%.*]], i32 0, i32 0
; CHECK-NEXT:    call void @nanos6_unpacked_deps_main0(%struct.S* [[GEP_S]], i8* [[HANDLER:%.*]])
; CHECK-NEXT:    ret void
;
entry:
  %gep_s = getelementptr %nanos6_task_args_main0, %nanos6_task_args_main0* %task_args, i32 0, i32 0
  call void @nanos6_unpacked_deps_main0(%struct.S* %gep_s, i8* %handler)
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noinline norecurse nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline noreturn nounwind }
attributes #5 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}
!llvm.ident = !{!5}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: "human", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, enums: !2, nameTableKind: None)
!1 = !DIFile(filename: "t3.ll", directory: "")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{!""}
!6 = distinct !DISubprogram(name: "foo", scope: !1, file: !1, line: 5, type: !7, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!7 = !DISubroutineType(types: !2)
!8 = !DILocation(line: 5, column: 23, scope: !6)
!9 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 7, type: !7, scopeLine: 7, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!10 = !DILocation(line: 9, column: 13, scope: !9)
!11 = !DILocation(line: 13, column: 1, scope: !9)
!12 = !DILocation(line: 11, column: 9, scope: !9)
!13 = distinct !DISubprogram(name: "S", scope: !1, file: !1, line: 1, type: !7, scopeLine: 1, flags: DIFlagArtificial | DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!14 = !DILocation(line: 1, column: 8, scope: !13)
!15 = distinct !DISubprogram(linkageName: "oss_copy_ctor_ZN1SC1ERKS_", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!16 = !DILocation(line: 0, scope: !15)
!17 = !DILocation(line: 9, column: 35, scope: !15)
!18 = distinct !DISubprogram(name: "~S", scope: !1, file: !1, line: 2, type: !7, scopeLine: 2, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!19 = !DILocation(line: 2, column: 10, scope: !18)
!20 = distinct !DISubprogram(linkageName: "oss_dtor_ZN1SD1Ev", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!21 = !DILocation(line: 0, scope: !20)
