; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -ompss-2 -S | FileCheck %s
; ModuleID = 'task_phi.c'
source_filename = "task_phi.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; void fold_if(int a, int b) {
;     #pragma oss task final(1)
;     {
;     int l = a || b;
;     if (l == 3)
;         l++;
;     else l--;
;     }
;     #pragma oss taskwait
; }
;
; int main() {
;     fold_if(1, 2);
; }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fold_if(i32 %a, i32 %b) #0 !dbg !6 {
; CHECK-LABEL: @fold_if(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[A_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[B_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 [[A:%.*]], i32* [[A_ADDR]], align 4
; CHECK-NEXT:    store i32 [[B:%.*]], i32* [[B_ADDR]], align 4
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg !8
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca %nanos6_task_args_fold_if0*, align 8, !dbg !8
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast %nanos6_task_args_fold_if0** [[TMP0]] to i8**, !dbg !8
; CHECK-NEXT:    [[TMP2:%.*]] = alloca i8*, align 8, !dbg !8
; CHECK-NEXT:    call void @nanos6_create_task(%nanos6_task_info_t* @task_info_var_fold_if0, %nanos6_task_invocation_info_t* @task_invocation_info_fold_if0, i64 16, i8** [[TMP1]], i8** [[TMP2]], i64 1, i64 0), !dbg !8
; CHECK-NEXT:    [[TMP3:%.*]] = load %nanos6_task_args_fold_if0*, %nanos6_task_args_fold_if0** [[TMP0]], align 8, !dbg !8
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast %nanos6_task_args_fold_if0* [[TMP3]] to i8*, !dbg !8
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, i8* [[TMP4]], i64 16, !dbg !8
; CHECK-NEXT:    [[GEP_A_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOLD_IF0:%.*]], %nanos6_task_args_fold_if0* [[TMP3]], i32 0, i32 0, !dbg !8
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast i32* [[GEP_A_ADDR]] to i8*, !dbg !8
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i32* [[A_ADDR]] to i8*, !dbg !8
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP5]], i8* align 4 [[TMP6]], i64 4, i1 false), !dbg !8
; CHECK-NEXT:    [[GEP_B_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOLD_IF0]], %nanos6_task_args_fold_if0* [[TMP3]], i32 0, i32 1, !dbg !8
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast i32* [[GEP_B_ADDR]] to i8*, !dbg !8
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast i32* [[B_ADDR]] to i8*, !dbg !8
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP7]], i8* align 4 [[TMP8]], i64 4, i1 false), !dbg !8
; CHECK-NEXT:    [[TMP9:%.*]] = load i8*, i8** [[TMP2]], align 8, !dbg !8
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP9]]), !dbg !8
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg !8
; CHECK:       final.end:
; CHECK-NEXT:    call void @nanos6_taskwait(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @0, i32 0, i32 0)), !dbg !9
; CHECK-NEXT:    ret void, !dbg !10
; CHECK:       final.then:
; CHECK-NEXT:    [[L_CLONE:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP10:%.*]] = load i32, i32* [[A_ADDR]], align 4, !dbg !11
; CHECK-NEXT:    [[TOBOOL_CLONE:%.*]] = icmp ne i32 [[TMP10]], 0, !dbg !11
; CHECK-NEXT:    br i1 [[TOBOOL_CLONE]], label [[LOR_END_CLONE:%.*]], label [[LOR_RHS_CLONE:%.*]], !dbg !12
; CHECK:       lor.end.clone:
; CHECK-NEXT:    [[TMP11:%.*]] = phi i1 [ true, [[FINAL_THEN:%.*]] ], [ [[TOBOOL1_CLONE:%.*]], [[LOR_RHS_CLONE]] ]
; CHECK-NEXT:    [[LOR_EXT_CLONE:%.*]] = zext i1 [[TMP11]] to i32, !dbg !12
; CHECK-NEXT:    store i32 [[LOR_EXT_CLONE]], i32* [[L_CLONE]], align 4, !dbg !13
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, i32* [[L_CLONE]], align 4, !dbg !14
; CHECK-NEXT:    [[CMP_CLONE:%.*]] = icmp eq i32 [[TMP12]], 3, !dbg !15
; CHECK-NEXT:    br i1 [[CMP_CLONE]], label [[IF_THEN_CLONE:%.*]], label [[IF_ELSE_CLONE:%.*]], !dbg !14
; CHECK:       lor.rhs.clone:
; CHECK-NEXT:    [[TMP13:%.*]] = load i32, i32* [[B_ADDR]], align 4, !dbg !16
; CHECK-NEXT:    [[TOBOOL1_CLONE]] = icmp ne i32 [[TMP13]], 0, !dbg !12
; CHECK-NEXT:    br label [[LOR_END_CLONE]], !dbg !12
; CHECK:       if.then.clone:
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, i32* [[L_CLONE]], align 4, !dbg !17
; CHECK-NEXT:    [[INC_CLONE:%.*]] = add nsw i32 [[TMP14]], 1, !dbg !17
; CHECK-NEXT:    store i32 [[INC_CLONE]], i32* [[L_CLONE]], align 4, !dbg !17
; CHECK-NEXT:    br label [[IF_END_CLONE:%.*]], !dbg !18
; CHECK:       if.else.clone:
; CHECK-NEXT:    [[TMP15:%.*]] = load i32, i32* [[L_CLONE]], align 4, !dbg !19
; CHECK-NEXT:    [[DEC_CLONE:%.*]] = add nsw i32 [[TMP15]], -1, !dbg !19
; CHECK-NEXT:    store i32 [[DEC_CLONE]], i32* [[L_CLONE]], align 4, !dbg !19
; CHECK-NEXT:    br label [[IF_END_CLONE]]
; CHECK:       if.end.clone:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg !9
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP16:%.*]] = call i32 @nanos6_in_final(), !dbg !8
; CHECK-NEXT:    [[TMP17:%.*]] = icmp ne i32 [[TMP16]], 0, !dbg !8
; CHECK-NEXT:    br i1 [[TMP17]], label [[FINAL_THEN]], label [[CODEREPL:%.*]], !dbg !8
;
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"(i32* %a.addr), "QUAL.OSS.FIRSTPRIVATE"(i32* %b.addr), "QUAL.OSS.FINAL"(i1 true) ], !dbg !8
  %l = alloca i32, align 4
  %1 = load i32, i32* %a.addr, align 4, !dbg !9
  %tobool = icmp ne i32 %1, 0, !dbg !9
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !10

lor.rhs:                                          ; preds = %entry
  %2 = load i32, i32* %b.addr, align 4, !dbg !11
  %tobool1 = icmp ne i32 %2, 0, !dbg !10
  br label %lor.end, !dbg !10

lor.end:                                          ; preds = %lor.rhs, %entry
  %3 = phi i1 [ true, %entry ], [ %tobool1, %lor.rhs ]
  %lor.ext = zext i1 %3 to i32, !dbg !10
  store i32 %lor.ext, i32* %l, align 4, !dbg !12
  %4 = load i32, i32* %l, align 4, !dbg !13
  %cmp = icmp eq i32 %4, 3, !dbg !14
  br i1 %cmp, label %if.then, label %if.else, !dbg !13

if.then:                                          ; preds = %lor.end
  %5 = load i32, i32* %l, align 4, !dbg !15
  %inc = add nsw i32 %5, 1, !dbg !15
  store i32 %inc, i32* %l, align 4, !dbg !15
  br label %if.end, !dbg !16

if.else:                                          ; preds = %lor.end
  %6 = load i32, i32* %l, align 4, !dbg !17
  %dec = add nsw i32 %6, -1, !dbg !17
  store i32 %dec, i32* %l, align 4, !dbg !17
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @llvm.directive.region.exit(token %0), !dbg !18
  %7 = call i1 @llvm.directive.marker() [ "DIR.OSS"([9 x i8] c"TASKWAIT\00") ], !dbg !19
  ret void, !dbg !20
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

; Function Attrs: nounwind
declare i1 @llvm.directive.marker() #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !21 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @fold_if(i32 1, i32 2), !dbg !21
; CHECK-NEXT:    ret i32 0, !dbg !22
;
entry:
  call void @fold_if(i32 1, i32 2), !dbg !22
  ret i32 0, !dbg !23
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}
!llvm.ident = !{!5}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "human", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "task_phi.c", directory: "")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{!""}
!6 = distinct !DISubprogram(name: "fold_if", scope: !1, file: !1, line: 1, type: !7, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!7 = !DISubroutineType(types: !2)
!8 = !DILocation(line: 2, column: 13, scope: !6)
!9 = !DILocation(line: 4, column: 13, scope: !6)
!10 = !DILocation(line: 4, column: 15, scope: !6)
!11 = !DILocation(line: 4, column: 18, scope: !6)
!12 = !DILocation(line: 4, column: 9, scope: !6)
!13 = !DILocation(line: 5, column: 9, scope: !6)
!14 = !DILocation(line: 5, column: 11, scope: !6)
!15 = !DILocation(line: 6, column: 10, scope: !6)
!16 = !DILocation(line: 6, column: 9, scope: !6)
!17 = !DILocation(line: 7, column: 11, scope: !6)
!18 = !DILocation(line: 8, column: 5, scope: !6)
!19 = !DILocation(line: 9, column: 13, scope: !6)
!20 = !DILocation(line: 10, column: 1, scope: !6)
!21 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 12, type: !7, scopeLine: 12, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!22 = !DILocation(line: 13, column: 5, scope: !21)
!23 = !DILocation(line: 14, column: 1, scope: !21)
