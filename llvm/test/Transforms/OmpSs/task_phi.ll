; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -ompss-2 -S | FileCheck %s
; ModuleID = 't4.c'
source_filename = "t4.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%nanos6_task_invocation_info_t = type { i8* }
%nanos6_task_implementation_info_t = type { i32, void ()*, void ()*, i8*, i8*, void ()* }
%nanos6_task_info_t = type { i32, void ()*, void ()*, i8*, i32, {}*, void ()*, void ()*, void ()**, void ()** }
%nanos6_task_args_fold_if0 = type { i32, i32 }
%nanos6_address_translation_entry_t = type opaque

@0 = private unnamed_addr constant [10 x i8] c"t4.c:9:13\00", align 1
@1 = private unnamed_addr constant [10 x i8] c"t4.c:2:13\00", align 1
@task_invocation_info_fold_if0 = internal constant %nanos6_task_invocation_info_t { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i32 0, i32 0) }, align 64
@implementations_var_fold_if0 = internal constant [1 x %nanos6_task_implementation_info_t] [%nanos6_task_implementation_info_t { i32 0, void ()* bitcast (void (%nanos6_task_args_fold_if0*, i8*, %nanos6_address_translation_entry_t*)* @nanos6_ol_task_region_fold_if0 to void ()*), void ()* null, i8* null, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i32 0, i32 0), void ()* null }], align 64
@task_info_var_fold_if0 = internal constant %nanos6_task_info_t { i32 0, void ()* bitcast (void (%nanos6_task_args_fold_if0*, i8*)* @nanos6_ol_deps_fold_if0 to void ()*), void ()* null, i8* null, i32 1, {}* bitcast ([1 x %nanos6_task_implementation_info_t]* @implementations_var_fold_if0 to {}*), void ()* null, void ()* null, void ()** null, void ()** null }, align 64

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fold_if(i32 %a, i32 %b) #0 !dbg !6 {
; CHECK-LABEL: @fold_if(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[A_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[B_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 [[A:%.*]], i32* [[A_ADDR]], align 4
; CHECK-NEXT:    store i32 [[B:%.*]], i32* [[B_ADDR]], align 4
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg !8
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca %nanos6_task_args_fold_if0*, !dbg !8
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast %nanos6_task_args_fold_if0** [[TMP0]] to i8**, !dbg !8
; CHECK-NEXT:    [[TMP2:%.*]] = alloca i8*, !dbg !8
; CHECK-NEXT:    call void @nanos6_create_task(%nanos6_task_info_t* @task_info_var_fold_if0, %nanos6_task_invocation_info_t* @task_invocation_info_fold_if0, i64 16, i8** [[TMP1]], i8** [[TMP2]], i64 1, i64 0), !dbg !8
; CHECK-NEXT:    [[TMP3:%.*]] = load %nanos6_task_args_fold_if0*, %nanos6_task_args_fold_if0** [[TMP0]], !dbg !8
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast %nanos6_task_args_fold_if0* [[TMP3]] to i8*, !dbg !8
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, i8* [[TMP4]], i64 16, !dbg !8
; CHECK-NEXT:    [[GEP_A_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOLD_IF0:%.*]], %nanos6_task_args_fold_if0* [[TMP3]], i32 0, i32 0, !dbg !8
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast i32* [[GEP_A_ADDR]] to i8*, !dbg !8
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i32* [[A_ADDR]] to i8*, !dbg !8
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP5]], i8* align 4 [[TMP6]], i64 4, i1 false), !dbg !8
; CHECK-NEXT:    [[GEP_B_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOLD_IF0]], %nanos6_task_args_fold_if0* [[TMP3]], i32 0, i32 1, !dbg !8
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast i32* [[GEP_B_ADDR]] to i8*, !dbg !8
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast i32* [[B_ADDR]] to i8*, !dbg !8
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP7]], i8* align 4 [[TMP8]], i64 4, i1 false), !dbg !8
; CHECK-NEXT:    [[TMP9:%.*]] = load i8*, i8** [[TMP2]], !dbg !8
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP9]]), !dbg !8
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg !8
; CHECK:       final.end:
; CHECK-NEXT:    call void @nanos6_taskwait(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i32 0, i32 0)), !dbg !9
; CHECK-NEXT:    ret void, !dbg !10
; CHECK:       final.then:
; CHECK-NEXT:    [[L_CLONE:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP10:%.*]] = load i32, i32* [[A_ADDR]], align 4, !dbg !11
; CHECK-NEXT:    [[TOBOOL_CLONE:%.*]] = icmp ne i32 [[TMP10]], 0, !dbg !11
; CHECK-NEXT:    br i1 [[TOBOOL_CLONE]], label [[LOR_END_CLONE:%.*]], label [[LOR_RHS_CLONE:%.*]], !dbg !12
; CHECK:       lor.end.clone:
; CHECK-NEXT:    [[TMP11:%.*]] = phi i1 [ true, [[FINAL_THEN:%.*]] ], [ [[TOBOOL1_CLONE:%.*]], [[LOR_RHS_CLONE]] ]
; CHECK-NEXT:    [[LOR_EXT_CLONE:%.*]] = zext i1 [[TMP11]] to i32, !dbg !12
; CHECK-NEXT:    store i32 [[LOR_EXT_CLONE]], i32* [[L_CLONE]], align 4, !dbg !13
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, i32* [[L_CLONE]], align 4, !dbg !14
; CHECK-NEXT:    [[CMP_CLONE:%.*]] = icmp eq i32 [[TMP12]], 3, !dbg !15
; CHECK-NEXT:    br i1 [[CMP_CLONE]], label [[IF_THEN_CLONE:%.*]], label [[IF_ELSE_CLONE:%.*]], !dbg !14
; CHECK:       lor.rhs.clone:
; CHECK-NEXT:    [[TMP13:%.*]] = load i32, i32* [[B_ADDR]], align 4, !dbg !16
; CHECK-NEXT:    [[TOBOOL1_CLONE]] = icmp ne i32 [[TMP13]], 0, !dbg !12
; CHECK-NEXT:    br label [[LOR_END_CLONE]], !dbg !12
; CHECK:       if.then.clone:
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, i32* [[L_CLONE]], align 4, !dbg !17
; CHECK-NEXT:    [[INC_CLONE:%.*]] = add nsw i32 [[TMP14]], 1, !dbg !17
; CHECK-NEXT:    store i32 [[INC_CLONE]], i32* [[L_CLONE]], align 4, !dbg !17
; CHECK-NEXT:    br label [[IF_END_CLONE:%.*]], !dbg !18
; CHECK:       if.else.clone:
; CHECK-NEXT:    [[TMP15:%.*]] = load i32, i32* [[L_CLONE]], align 4, !dbg !19
; CHECK-NEXT:    [[DEC_CLONE:%.*]] = add nsw i32 [[TMP15]], -1, !dbg !19
; CHECK-NEXT:    store i32 [[DEC_CLONE]], i32* [[L_CLONE]], align 4, !dbg !19
; CHECK-NEXT:    br label [[IF_END_CLONE]]
; CHECK:       if.end.clone:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg !9
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP16:%.*]] = call i32 @nanos6_in_final(), !dbg !8
; CHECK-NEXT:    [[TMP17:%.*]] = icmp ne i32 [[TMP16]], 0, !dbg !8
; CHECK-NEXT:    br i1 [[TMP17]], label [[FINAL_THEN]], label [[CODEREPL:%.*]], !dbg !8
;
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  br label %final.cond, !dbg !8

codeRepl:                                         ; preds = %final.cond
  %0 = alloca %nanos6_task_args_fold_if0*, !dbg !8
  %1 = bitcast %nanos6_task_args_fold_if0** %0 to i8**, !dbg !8
  %2 = alloca i8*, !dbg !8
  call void @nanos6_create_task(%nanos6_task_info_t* @task_info_var_fold_if0, %nanos6_task_invocation_info_t* @task_invocation_info_fold_if0, i64 16, i8** %1, i8** %2, i64 1, i64 0), !dbg !8
  %3 = load %nanos6_task_args_fold_if0*, %nanos6_task_args_fold_if0** %0, !dbg !8
  %4 = bitcast %nanos6_task_args_fold_if0* %3 to i8*, !dbg !8
  %args_end = getelementptr i8, i8* %4, i64 16, !dbg !8
  %gep_a.addr = getelementptr %nanos6_task_args_fold_if0, %nanos6_task_args_fold_if0* %3, i32 0, i32 0, !dbg !8
  %5 = bitcast i32* %gep_a.addr to i8*, !dbg !8
  %6 = bitcast i32* %a.addr to i8*, !dbg !8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5, i8* align 4 %6, i64 4, i1 false), !dbg !8
  %gep_b.addr = getelementptr %nanos6_task_args_fold_if0, %nanos6_task_args_fold_if0* %3, i32 0, i32 1, !dbg !8
  %7 = bitcast i32* %gep_b.addr to i8*, !dbg !8
  %8 = bitcast i32* %b.addr to i8*, !dbg !8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 4, i1 false), !dbg !8
  %9 = load i8*, i8** %2, !dbg !8
  call void @nanos6_submit_task(i8* %9), !dbg !8
  br label %final.end, !dbg !8

final.end:                                        ; preds = %codeRepl, %if.end.clone
  call void @nanos6_taskwait(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i32 0, i32 0)), !dbg !9
  ret void, !dbg !10

final.then:                                       ; preds = %final.cond
  %l.clone = alloca i32, align 4
  %10 = load i32, i32* %a.addr, align 4, !dbg !11
  %tobool.clone = icmp ne i32 %10, 0, !dbg !11
  br i1 %tobool.clone, label %lor.end.clone, label %lor.rhs.clone, !dbg !12

lor.end.clone:                                    ; preds = %final.then, %lor.rhs.clone
  %11 = phi i1 [ true, %final.then ], [ %tobool1.clone, %lor.rhs.clone ]
  %lor.ext.clone = zext i1 %11 to i32, !dbg !12
  store i32 %lor.ext.clone, i32* %l.clone, align 4, !dbg !13
  %12 = load i32, i32* %l.clone, align 4, !dbg !14
  %cmp.clone = icmp eq i32 %12, 3, !dbg !15
  br i1 %cmp.clone, label %if.then.clone, label %if.else.clone, !dbg !14

lor.rhs.clone:                                    ; preds = %final.then
  %13 = load i32, i32* %b.addr, align 4, !dbg !16
  %tobool1.clone = icmp ne i32 %13, 0, !dbg !12
  br label %lor.end.clone, !dbg !12

if.then.clone:                                    ; preds = %lor.end.clone
  %14 = load i32, i32* %l.clone, align 4, !dbg !17
  %inc.clone = add nsw i32 %14, 1, !dbg !17
  store i32 %inc.clone, i32* %l.clone, align 4, !dbg !17
  br label %if.end.clone, !dbg !18

if.else.clone:                                    ; preds = %lor.end.clone
  %15 = load i32, i32* %l.clone, align 4, !dbg !19
  %dec.clone = add nsw i32 %15, -1, !dbg !19
  store i32 %dec.clone, i32* %l.clone, align 4, !dbg !19
  br label %if.end.clone

if.end.clone:                                     ; preds = %if.then.clone, %if.else.clone
  br label %final.end, !dbg !9

final.cond:                                       ; preds = %entry
  %16 = call i32 @nanos6_in_final(), !dbg !8
  %17 = icmp ne i32 %16, 0, !dbg !8
  br i1 %17, label %final.then, label %codeRepl, !dbg !8
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

; Function Attrs: nounwind
declare i1 @llvm.directive.marker() #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !20 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @fold_if(i32 1, i32 2), !dbg !21
; CHECK-NEXT:    ret i32 0, !dbg !22
;
entry:
  call void @fold_if(i32 1, i32 2), !dbg !21
  ret i32 0, !dbg !22
}

declare void @nanos6_create_task(%nanos6_task_info_t*, %nanos6_task_invocation_info_t*, i64, i8**, i8**, i64, i64)

declare void @nanos6_submit_task(i8*)

declare i32 @nanos6_in_final()

declare void @nanos6_taskwait(i8*)

define internal void @nanos6_unpacked_task_region_fold_if0(i32* %a.addr, i32* %b.addr, i8* %device_env, %nanos6_address_translation_entry_t* %address_translation_table) {
; CHECK-LABEL: @nanos6_unpacked_task_region_fold_if0(
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg !11
; CHECK:       0:
; CHECK-NEXT:    [[L:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, i32* [[A_ADDR:%.*]], align 4, !dbg !11
; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp ne i32 [[TMP1]], 0, !dbg !11
; CHECK-NEXT:    br i1 [[TOBOOL]], label [[LOR_END:%.*]], label [[LOR_RHS:%.*]], !dbg !12
; CHECK:       lor.end:
; CHECK-NEXT:    [[TMP2:%.*]] = phi i1 [ true, [[TMP0]] ], [ [[TOBOOL1:%.*]], [[LOR_RHS]] ]
; CHECK-NEXT:    [[LOR_EXT:%.*]] = zext i1 [[TMP2]] to i32, !dbg !12
; CHECK-NEXT:    store i32 [[LOR_EXT]], i32* [[L]], align 4, !dbg !13
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, i32* [[L]], align 4, !dbg !14
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP3]], 3, !dbg !15
; CHECK-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_ELSE:%.*]], !dbg !14
; CHECK:       lor.rhs:
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, i32* [[B_ADDR:%.*]], align 4, !dbg !16
; CHECK-NEXT:    [[TOBOOL1]] = icmp ne i32 [[TMP4]], 0, !dbg !12
; CHECK-NEXT:    br label [[LOR_END]], !dbg !12
; CHECK:       if.then:
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, i32* [[L]], align 4, !dbg !17
; CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP5]], 1, !dbg !17
; CHECK-NEXT:    store i32 [[INC]], i32* [[L]], align 4, !dbg !17
; CHECK-NEXT:    br label [[IF_END:%.*]], !dbg !18
; CHECK:       if.else:
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, i32* [[L]], align 4, !dbg !19
; CHECK-NEXT:    [[DEC:%.*]] = add nsw i32 [[TMP6]], -1, !dbg !19
; CHECK-NEXT:    store i32 [[DEC]], i32* [[L]], align 4, !dbg !19
; CHECK-NEXT:    br label [[IF_END]]
; CHECK:       if.end:
; CHECK-NEXT:    ret void, !dbg !9
;
newFuncRoot:
  br label %0, !dbg !11

0:                                                ; preds = %newFuncRoot
  %l = alloca i32, align 4
  %1 = load i32, i32* %a.addr, align 4, !dbg !11
  %tobool = icmp ne i32 %1, 0, !dbg !11
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !12

lor.end:                                          ; preds = %lor.rhs, %0
  %2 = phi i1 [ true, %0 ], [ %tobool1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32, !dbg !12
  store i32 %lor.ext, i32* %l, align 4, !dbg !13
  %3 = load i32, i32* %l, align 4, !dbg !14
  %cmp = icmp eq i32 %3, 3, !dbg !15
  br i1 %cmp, label %if.then, label %if.else, !dbg !14

lor.rhs:                                          ; preds = %0
  %4 = load i32, i32* %b.addr, align 4, !dbg !16
  %tobool1 = icmp ne i32 %4, 0, !dbg !12
  br label %lor.end, !dbg !12

if.then:                                          ; preds = %lor.end
  %5 = load i32, i32* %l, align 4, !dbg !17
  %inc = add nsw i32 %5, 1, !dbg !17
  store i32 %inc, i32* %l, align 4, !dbg !17
  br label %if.end, !dbg !18

if.else:                                          ; preds = %lor.end
  %6 = load i32, i32* %l, align 4, !dbg !19
  %dec = add nsw i32 %6, -1, !dbg !19
  store i32 %dec, i32* %l, align 4, !dbg !19
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !9
}

define internal void @nanos6_ol_task_region_fold_if0(%nanos6_task_args_fold_if0* %task_args, i8* %device_env, %nanos6_address_translation_entry_t* %address_translation_table) {
; CHECK-LABEL: @nanos6_ol_task_region_fold_if0(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_A_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOLD_IF0:%.*]], %nanos6_task_args_fold_if0* [[TASK_ARGS:%.*]], i32 0, i32 0
; CHECK-NEXT:    [[GEP_B_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOLD_IF0]], %nanos6_task_args_fold_if0* [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_fold_if0(i32* [[GEP_A_ADDR]], i32* [[GEP_B_ADDR]], i8* [[DEVICE_ENV:%.*]], %nanos6_address_translation_entry_t* [[ADDRESS_TRANSLATION_TABLE:%.*]])
; CHECK-NEXT:    ret void
;
entry:
  %gep_a.addr = getelementptr %nanos6_task_args_fold_if0, %nanos6_task_args_fold_if0* %task_args, i32 0, i32 0
  %gep_b.addr = getelementptr %nanos6_task_args_fold_if0, %nanos6_task_args_fold_if0* %task_args, i32 0, i32 1
  call void @nanos6_unpacked_task_region_fold_if0(i32* %gep_a.addr, i32* %gep_b.addr, i8* %device_env, %nanos6_address_translation_entry_t* %address_translation_table)
  ret void
}

define internal void @nanos6_unpacked_deps_fold_if0(i32* %a.addr, i32* %b.addr, i8* %handler) {
; CHECK-LABEL: @nanos6_unpacked_deps_fold_if0(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void
;
entry:
  ret void
}

define internal void @nanos6_ol_deps_fold_if0(%nanos6_task_args_fold_if0* %task_args, i8* %handler) {
; CHECK-LABEL: @nanos6_ol_deps_fold_if0(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_A_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOLD_IF0:%.*]], %nanos6_task_args_fold_if0* [[TASK_ARGS:%.*]], i32 0, i32 0
; CHECK-NEXT:    [[GEP_B_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOLD_IF0]], %nanos6_task_args_fold_if0* [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    call void @nanos6_unpacked_deps_fold_if0(i32* [[GEP_A_ADDR]], i32* [[GEP_B_ADDR]], i8* [[HANDLER:%.*]])
; CHECK-NEXT:    ret void
;
entry:
  %gep_a.addr = getelementptr %nanos6_task_args_fold_if0, %nanos6_task_args_fold_if0* %task_args, i32 0, i32 0
  %gep_b.addr = getelementptr %nanos6_task_args_fold_if0, %nanos6_task_args_fold_if0* %task_args, i32 0, i32 1
  call void @nanos6_unpacked_deps_fold_if0(i32* %gep_a.addr, i32* %gep_b.addr, i8* %handler)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}
!llvm.ident = !{!5}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "human", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, enums: !2, nameTableKind: None)
!1 = !DIFile(filename: "t4.c", directory: "")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{!""}
!6 = distinct !DISubprogram(name: "fold_if", scope: !1, file: !1, line: 1, type: !7, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!7 = !DISubroutineType(types: !2)
!8 = !DILocation(line: 2, column: 13, scope: !6)
!9 = !DILocation(line: 9, column: 13, scope: !6)
!10 = !DILocation(line: 10, column: 1, scope: !6)
!11 = !DILocation(line: 4, column: 13, scope: !6)
!12 = !DILocation(line: 4, column: 15, scope: !6)
!13 = !DILocation(line: 4, column: 9, scope: !6)
!14 = !DILocation(line: 5, column: 9, scope: !6)
!15 = !DILocation(line: 5, column: 11, scope: !6)
!16 = !DILocation(line: 4, column: 18, scope: !6)
!17 = !DILocation(line: 6, column: 10, scope: !6)
!18 = !DILocation(line: 6, column: 9, scope: !6)
!19 = !DILocation(line: 7, column: 11, scope: !6)
!20 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 12, type: !7, scopeLine: 12, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!21 = !DILocation(line: 13, column: 5, scope: !20)
!22 = !DILocation(line: 14, column: 1, scope: !20)
