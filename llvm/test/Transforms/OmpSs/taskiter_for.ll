; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -ompss-2 -S | FileCheck %s
; ModuleID = 'taskiter_for.ll'
source_filename = "taskiter_for.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; NOTE: this tests is made by hand using
; short step();
; int main() {
;     #pragma oss task for
;     for (int i = 0; i < 10; i+=step()) {
;     }
;     #pragma oss taskwait
; }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !7 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 0, i32* [[I]], align 4, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = alloca %nanos6_task_args_main0*, align 8, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca i8*, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG11]]
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast %nanos6_task_args_main0** [[TMP0]] to i8**, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 0, i64* [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, i64* [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @compute_lb(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_ub(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP6:%.*]] = call i16 @compute_step(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP5]], [[TMP4]], !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP8:%.*]] = sub i32 [[TMP7]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP9:%.*]] = sext i16 [[TMP6]] to i32, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP10:%.*]] = sdiv i32 [[TMP8]], [[TMP9]], !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP11:%.*]] = add i32 [[TMP10]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP12:%.*]] = sext i32 [[TMP11]] to i64, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP13:%.*]] = mul i64 1, [[TMP12]], !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_create_iter(%nanos6_task_info_t* @task_info_var_main0, %nanos6_task_invocation_info_t* @task_invocation_info_main0, i8* null, i64 16, i8** [[TMP2]], i8** [[TMP1]], i64 16, i64 [[TMP3]], i64 0, i64 [[TMP13]], i64 0), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP14:%.*]] = load %nanos6_task_args_main0*, %nanos6_task_args_main0** [[TMP0]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP15:%.*]] = bitcast %nanos6_task_args_main0* [[TMP14]] to i8*, !dbg [[DBG11]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, i8* [[TMP15]], i64 16, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_I:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN0:%.*]], %nanos6_task_args_main0* [[TMP14]], i32 0, i32 0, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast i32* [[GEP_I]] to i8*, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast i32* [[I]] to i8*, !dbg [[DBG11]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP16]], i8* align 4 [[TMP17]], i64 4, i1 false), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP18:%.*]] = load i8*, i8** [[TMP1]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP18]]), !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG11]]
; CHECK:       final.end:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG12:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    [[TMP19:%.*]] = call i32 @compute_lb(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP20:%.*]] = call i32 @compute_ub(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP21:%.*]] = call i16 @compute_step(), !dbg [[DBG11]]
; CHECK-NEXT:    store i32 [[TMP19]], i32* [[I]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG11]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP22:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP23:%.*]] = icmp slt i32 [[TMP22]], [[TMP20]], !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP23]], label [[TMP24:%.*]], label [[FOR_END:%.*]], !dbg [[DBG11]]
; CHECK:       24:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]], !dbg [[DBG11]]
; CHECK:       for.body:
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg [[DBG12]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG11]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP25:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP26:%.*]] = sext i16 [[TMP21]] to i32, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP27:%.*]] = add i32 [[TMP25]], [[TMP26]], !dbg [[DBG11]]
; CHECK-NEXT:    store i32 [[TMP27]], i32* [[I]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG11]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP28:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP29:%.*]] = icmp ne i32 [[TMP28]], 0, !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP29]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG11]]
;
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4, !dbg !10
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([13 x i8] c"TASKITER.FOR\00"), "QUAL.OSS.FIRSTPRIVATE"(i32* %i), "QUAL.OSS.LOOP.IND.VAR"(i32* %i), "QUAL.OSS.LOOP.LOWER.BOUND"(i32 ()* @compute_lb), "QUAL.OSS.LOOP.UPPER.BOUND"(i32 ()* @compute_ub), "QUAL.OSS.LOOP.STEP"(i16 ()* @compute_step), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1) ], !dbg !11
  call void @llvm.directive.region.exit(token %0), !dbg !12
  ret i32 0, !dbg !13
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

define internal i32 @compute_lb() #2 !dbg !14 {
entry:
  ret i32 0, !dbg !15
}

define internal i32 @compute_ub() #2 !dbg !16 {
entry:
  ret i32 10, !dbg !17
}

define internal i16 @compute_step() #2 !dbg !18 {
entry:
  %call = call signext i16 (...) @step(), !dbg !19
  ret i16 %call, !dbg !19
}

; CHECK: define internal void @nanos6_unpacked_task_region_main0(i32* %i, i8* %device_env, %nanos6_address_translation_entry_t* %address_translation_table)
; CHECK: newFuncRoot:
; CHECK-NEXT:   br label %0
; CHECK: 0:                                                ; preds = %newFuncRoot
; CHECK-NEXT:   %1 = load i32, i32* %i, align 4
; CHECK-NEXT:   %2 = call i16 @compute_step()
; CHECK-NEXT:   %3 = sext i16 %2 to i32
; CHECK-NEXT:   %4 = add i32 %1, %3
; CHECK-NEXT:   store i32 %4, i32* %i, align 4
; CHECK-NEXT:   br label %.exitStub
; CHECK: .exitStub:                                        ; preds = %0
; CHECK-NEXT:   ret void
; CHECK-NEXT: }

declare dso_local signext i16 @step(...) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind }
attributes #2 = { "min-legal-vector-width"="0" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "human", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "taskiter_for.ll", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 7, !"uwtable", i32 1}
!5 = !{i32 7, !"frame-pointer", i32 2}
!6 = !{!"clang version 14.0.0"}
!7 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 2, type: !8, scopeLine: 2, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !9)
!8 = !DISubroutineType(types: !9)
!9 = !{}
!10 = !DILocation(line: 4, column: 14, scope: !7)
!11 = !DILocation(line: 4, column: 10, scope: !7)
!12 = !DILocation(line: 5, column: 5, scope: !7)
!13 = !DILocation(line: 6, column: 1, scope: !7)
!14 = distinct !DISubprogram(linkageName: "compute_lb", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !9)
!15 = !DILocation(line: 4, column: 18, scope: !14)
!16 = distinct !DISubprogram(linkageName: "compute_ub", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !9)
!17 = !DILocation(line: 4, column: 25, scope: !16)
!18 = distinct !DISubprogram(linkageName: "compute_step", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !9)
!19 = !DILocation(line: 4, column: 34, scope: !18)
