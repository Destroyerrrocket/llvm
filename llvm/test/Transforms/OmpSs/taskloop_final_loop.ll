; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -ompss-2 -S | FileCheck %s
; ModuleID = 't1.c'
source_filename = "t1.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; NOTE: this test has been typed by hand from an 'oss task' example

; Checking only that we build the loop in final context correctly

; int sum = 0;
;
; void taskloop(int lb, int ub, int step) {
;     int i;
;     #pragma oss task
;     sum += i;
; }
;
; int main() {
;     taskloop(-55, 31, 2);
; }

@sum = dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @taskloop(i32 %lb, i32 %ub, i32 %step) #0 !dbg !6 {
; CHECK-LABEL: @taskloop(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[UB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[STEP_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 [[LB:%.*]], i32* [[LB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[UB:%.*]], i32* [[UB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[STEP:%.*]], i32* [[STEP_ADDR]], align 4
; CHECK-NEXT:    [[LB_VALUE:%.*]] = load i32, i32* [[LB_ADDR]], align 4
; CHECK-NEXT:    [[UB_VALUE:%.*]] = load i32, i32* [[UB_ADDR]], align 4
; CHECK-NEXT:    [[STEP_VALUE:%.*]] = load i32, i32* [[STEP_ADDR]], align 4
; CHECK-NEXT:    [[I_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[NEW_UB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg !8
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca %nanos6_task_args_taskloop0*, align 8, !dbg !8
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast %nanos6_task_args_taskloop0** [[TMP0]] to i8**, !dbg !8
; CHECK-NEXT:    [[TMP2:%.*]] = alloca i8*, align 8, !dbg !8
; CHECK-NEXT:    call void @nanos6_create_task(%nanos6_task_info_t* @task_info_var_taskloop0, %nanos6_task_invocation_info_t* @task_invocation_info_taskloop0, i64 16, i8** [[TMP1]], i8** [[TMP2]], i64 4, i64 -1), !dbg !8
; CHECK-NEXT:    [[TMP3:%.*]] = load %nanos6_task_args_taskloop0*, %nanos6_task_args_taskloop0** [[TMP0]], align 8, !dbg !8
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast %nanos6_task_args_taskloop0* [[TMP3]] to i8*, !dbg !8
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, i8* [[TMP4]], i64 16, !dbg !8
; CHECK-NEXT:    [[CAPT_GEP_LB_VALUE:%.*]] = getelementptr [[NANOS6_TASK_ARGS_TASKLOOP0:%.*]], %nanos6_task_args_taskloop0* [[TMP3]], i32 0, i32 1, !dbg !8
; CHECK-NEXT:    store i32 [[LB_VALUE]], i32* [[CAPT_GEP_LB_VALUE]], align 4, !dbg !8
; CHECK-NEXT:    [[CAPT_GEP_UB_VALUE:%.*]] = getelementptr [[NANOS6_TASK_ARGS_TASKLOOP0]], %nanos6_task_args_taskloop0* [[TMP3]], i32 0, i32 2, !dbg !8
; CHECK-NEXT:    store i32 [[UB_VALUE]], i32* [[CAPT_GEP_UB_VALUE]], align 4, !dbg !8
; CHECK-NEXT:    [[CAPT_GEP_STEP_VALUE:%.*]] = getelementptr [[NANOS6_TASK_ARGS_TASKLOOP0]], %nanos6_task_args_taskloop0* [[TMP3]], i32 0, i32 3, !dbg !8
; CHECK-NEXT:    store i32 [[STEP_VALUE]], i32* [[CAPT_GEP_STEP_VALUE]], align 4, !dbg !8
; CHECK-NEXT:    [[TMP5:%.*]] = load i8*, i8** [[TMP2]], align 8, !dbg !8
; CHECK-NEXT:    [[TMP6:%.*]] = sub i32 [[UB_VALUE]], [[LB_VALUE]], !dbg !8
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP6]], 1, !dbg !8
; CHECK-NEXT:    [[TMP8:%.*]] = sdiv i32 [[TMP7]], [[STEP_VALUE]], !dbg !8
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], 1, !dbg !8
; CHECK-NEXT:    [[TMP10:%.*]] = sext i32 [[TMP9]] to i64, !dbg !8
; CHECK-NEXT:    call void @nanos6_register_loop_bounds(i8* [[TMP5]], i64 0, i64 [[TMP10]], i64 0, i64 0), !dbg !8
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP5]]), !dbg !8
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg !8
; CHECK:       final.end:
; CHECK-NEXT:    ret void, !dbg !9
; CHECK:       final.then:
; CHECK-NEXT:    store i32 [[LB_VALUE]], i32* [[I_ADDR]], align 4, !dbg !8
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg !8
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, i32* [[I_ADDR]], align 4, !dbg !8
; CHECK-NEXT:    [[TMP12:%.*]] = icmp slt i32 [[TMP11]], [[UB_VALUE]], !dbg !8
; CHECK-NEXT:    br i1 [[TMP12]], label [[FOR_BODY:%.*]], label [[FINAL_END]], !dbg !8
; CHECK:       for.body:
; CHECK-NEXT:    [[TMP13:%.*]] = load i32, i32* @sum, align 4, !dbg !10
; CHECK-NEXT:    [[I_CLONE:%.*]] = load i32, i32* [[I_ADDR]], align 4, !dbg !10
; CHECK-NEXT:    [[ADD_CLONE:%.*]] = add nsw i32 [[TMP13]], [[I_CLONE]], !dbg !10
; CHECK-NEXT:    store i32 [[ADD_CLONE]], i32* @sum, align 4, !dbg !10
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg !9
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, i32* [[I_ADDR]], align 4, !dbg !8
; CHECK-NEXT:    [[TMP15:%.*]] = add i32 [[TMP14]], [[STEP_VALUE]], !dbg !8
; CHECK-NEXT:    store i32 [[TMP15]], i32* [[I_ADDR]], align 4, !dbg !8
; CHECK-NEXT:    br label [[FOR_COND]], !dbg !8
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP16:%.*]] = call i32 @nanos6_in_final(), !dbg !8
; CHECK-NEXT:    [[TMP17:%.*]] = icmp ne i32 [[TMP16]], 0, !dbg !8
; CHECK-NEXT:    br i1 [[TMP17]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg !8
;
entry:
  %lb.addr = alloca i32, align 4
  %ub.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  store i32 %lb, i32* %lb.addr, align 4
  store i32 %ub, i32* %ub.addr, align 4
  store i32 %step, i32* %step.addr, align 4

  %lb.value = load i32, i32* %lb.addr, align 4
  %ub.value = load i32, i32* %ub.addr, align 4
  %step.value = load i32, i32* %step.addr, align 4
  %i.addr = alloca i32, align 4
  %new.ub.addr = alloca i32, align 4

  %region = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASKLOOP\00"),
  "QUAL.OSS.PRIVATE"(i32* %i.addr),
  "QUAL.OSS.CAPTURED"(i32 %lb.value, i32 %ub.value, i32 %step.value),
  "QUAL.OSS.LOOP.TYPE"(i32 0, i32 1, i32 1, i32 1, i32 1),
  "QUAL.OSS.LOOP.IND.VAR"(i32* %i.addr),
  "QUAL.OSS.LOOP.LOWER.BOUND"(i32 %lb.value),
  "QUAL.OSS.LOOP.UPPER.BOUND"(i32 %ub.value),
  "QUAL.OSS.LOOP.STEP"(i32 %step.value) ], !dbg !8

  %0 = load i32, i32* @sum, align 4, !dbg !9
  %i = load i32, i32* %i.addr, align 4, !dbg !9
  %add = add nsw i32 %0, %i, !dbg !9
  store i32 %add, i32* @sum, align 4, !dbg !9

  call void @llvm.directive.region.exit(token %region), !dbg !10

  ret void, !dbg !11
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !12 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @taskloop(i32 -55, i32 31, i32 2), !dbg !12
; CHECK-NEXT:    ret i32 0, !dbg !13
;
entry:
  call void @taskloop(i32 -55, i32 31, i32 2), !dbg !13
  ret i32 0, !dbg !14
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}
!llvm.ident = !{!5}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "t1.c", directory: "")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{!"clang version 11.0.0 "}
!6 = distinct !DISubprogram(name: "taskloop", scope: !1, file: !1, line: 2, type: !7, scopeLine: 2, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!7 = !DISubroutineType(types: !2)
!8 = !DILocation(line: 3, column: 13, scope: !6)
!9 = !DILocation(line: 4, column: 9, scope: !6)
!10 = !DILocation(line: 4, column: 5, scope: !6)
!11 = !DILocation(line: 5, column: 1, scope: !6)
!12 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 6, type: !7, scopeLine: 6, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!13 = !DILocation(line: 7, column: 5, scope: !12)
!14 = !DILocation(line: 8, column: 1, scope: !12)
